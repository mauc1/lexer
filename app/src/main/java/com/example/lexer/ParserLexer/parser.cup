/* Simple +/-/* expression language; parser evaluates constant expressions on the fly*/
package ParserLexer;
import java_cup.runtime.*;

parser code {:
    // Connect this parser to a scanner!
    scanner s;
    Parser(scanner s){ this.s=s; }
:}

/* define how to connect to the scanner! */
init with {: s.init(); :};
scan with {: return s.next_token(); :};

//Terminales de tipos
terminal INTEGER, FLOAT, BOOL, CHAR, STRING;

//Terminales relacionales
terminal MENOR, MENORIGUAL, MAYOR, MAYORIGUAL, IGUALDAD, DIFERENTE;

//Terminales de parentesis y llaves
terminal PARENIZQ, PARENDER, BRACEIZQ, BRACEDER, CORCHETEIZQ, CORCHETEDER;

//Terminales aritmeticos unarios 
terminal INCREMENTO, DECREMENTO;

//Terminales aritmeticos binarios
terminal SUMA, RESTA, DIVISION, MULTIPLICACION, MODULO, POTENCIA;

//Terminales operadores logicos
terminal CONJUNCION, DISYUNCION, NEGACION;

//Terminales estructuras de control de flujo
terminal IF, ELSE, FOR, WHILE, SWITCH, CASE, BREAK, RETURN, DOSPUNTOS;

//Terminales de identificadores y main
terminal ID, NUMBER, ERROR, ASIGNACION, MAIN;

//Terminales de finalizacion
terminal ENDEXPR, COMMA;

//no terminales 
non terminal programa;

//inicio
starts with programa;

programa  ::=