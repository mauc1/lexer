// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/ParserLexer/lexerCup.jflex

/* https://www.jflex.de/manual.html */
/* JFlex example: partial Java language lexer specification */
package ParserLexer;
import java.io.StringReader;
import java_cup.runtime.*;

/*Declaraciones y opciones*/

@SuppressWarnings("fallthrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int ERROR = 4;
  public static final int DECREMENT = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\1"+
    "\1\6\1\7\1\10\3\0\1\11\2\12\1\13\1\12"+
    "\1\14\1\15\1\16\1\17\1\20\11\21\7\0\4\22"+
    "\1\23\25\22\1\12\1\24\1\12\1\0\1\25\1\0"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\2\22\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\3\12\7\0\1\3\64\0\1\56\10\0\1\57"+
    "\u0164\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\0\1\1\1\2\3\3\1\4\1\5\1\3"+
    "\1\6\1\2\1\7\2\2\2\10\1\11\2\2\22\11"+
    "\1\2\1\12\1\1\1\0\2\10\1\3\2\1\1\10"+
    "\3\1\1\13\1\1\41\11\1\1\1\11\2\0\1\3"+
    "\1\1\1\10\2\0\3\1\44\11\1\1\2\10\1\0"+
    "\1\1\2\0\1\1\10\11\1\14\11\11\1\15\3\11"+
    "\1\16\13\11\1\17\2\11\1\1\1\0\1\1\7\11"+
    "\1\20\3\11\1\21\3\11\1\22\5\11\1\23\2\11"+
    "\1\24\3\11\1\25\1\26\1\11\1\27\4\11\2\1"+
    "\7\11\1\4\1\30\5\11\1\31\1\32\11\11\1\33"+
    "\1\11\1\34\2\1\11\11\1\35\1\11\1\36\4\11"+
    "\1\37\1\40\1\41\2\11\1\42\1\11\1\43\1\44"+
    "\1\45\3\11\1\46\1\47\1\50\3\11\1\51\2\11"+
    "\1\52\2\11\1\53\1\54\6\11\1\55\1\56\2\11"+
    "\1\57\1\11\1\60\4\11\1\61\1\62\3\11\1\63"+
    "\1\64\1\11\1\65\1\66";

  private static int [] zzUnpackAction() {
    int [] result = new int[320];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\220\0\360\0\300"+
    "\0\u0120\0\u0150\0\220\0\300\0\300\0\u0180\0\u01b0\0\u01e0"+
    "\0\u0210\0\u0240\0\u0270\0\u02a0\0\u02d0\0\u0300\0\u0330\0\u0360"+
    "\0\u0390\0\u03c0\0\u03f0\0\u0420\0\u0450\0\u0480\0\u04b0\0\u04e0"+
    "\0\u0510\0\u0540\0\u0570\0\u05a0\0\u05d0\0\u0600\0\u0630\0\300"+
    "\0\220\0\u0660\0\u0690\0\u06c0\0\u06f0\0\u0720\0\u0750\0\u0780"+
    "\0\u07b0\0\u07e0\0\u0810\0\220\0\u0840\0\u0870\0\u08a0\0\u08d0"+
    "\0\u0900\0\u0930\0\u0960\0\u0990\0\u09c0\0\u09f0\0\u0a20\0\u0a50"+
    "\0\u0a80\0\u0ab0\0\u0ae0\0\u0b10\0\u0b40\0\u0b70\0\u0ba0\0\u0bd0"+
    "\0\u0c00\0\u0c30\0\u0c60\0\u0c90\0\u0cc0\0\u0cf0\0\u0d20\0\u0d50"+
    "\0\u0d80\0\u0db0\0\u0de0\0\u0e10\0\u0e40\0\u0e70\0\u0ea0\0\300"+
    "\0\u0ed0\0\u0f00\0\u0f30\0\u0f60\0\u0f90\0\u0fc0\0\u0ff0\0\u0270"+
    "\0\u1020\0\u1050\0\u1080\0\u10b0\0\u10e0\0\u1110\0\u1140\0\u1170"+
    "\0\u11a0\0\u11d0\0\u1200\0\u1230\0\u1260\0\u1290\0\u12c0\0\u12f0"+
    "\0\u1320\0\u1350\0\u1380\0\u13b0\0\u13e0\0\u1410\0\u1440\0\u1470"+
    "\0\u14a0\0\u14d0\0\u1500\0\u1530\0\u1560\0\u1590\0\u15c0\0\u15f0"+
    "\0\u1620\0\u1650\0\u1680\0\u16b0\0\u16e0\0\u1710\0\u1740\0\u1770"+
    "\0\u0fc0\0\u17a0\0\u17d0\0\u1800\0\u1830\0\u1860\0\u1890\0\u18c0"+
    "\0\u18f0\0\u1920\0\u1950\0\u1980\0\u19b0\0\u19e0\0\u0240\0\u1a10"+
    "\0\u1a40\0\u1a70\0\u1aa0\0\u1ad0\0\u1b00\0\u1b30\0\u1b60\0\u1b90"+
    "\0\u0240\0\u1bc0\0\u1bf0\0\u1c20\0\u0240\0\u1c50\0\u1c80\0\u1cb0"+
    "\0\u1ce0\0\u1d10\0\u1d40\0\u1d70\0\u1da0\0\u1dd0\0\u1e00\0\u1e30"+
    "\0\u1e60\0\u1e90\0\u1ec0\0\u1ef0\0\u1f20\0\u1f50\0\u1f80\0\u1fb0"+
    "\0\u1fe0\0\u2010\0\u2040\0\u2070\0\u20a0\0\u0240\0\u20d0\0\u2100"+
    "\0\u2130\0\u0240\0\u2160\0\u2190\0\u21c0\0\u0240\0\u21f0\0\u2220"+
    "\0\u2250\0\u2280\0\u22b0\0\u0240\0\u22e0\0\u2310\0\u0240\0\u2340"+
    "\0\u2370\0\u23a0\0\u0240\0\u0240\0\u23d0\0\u0240\0\u2400\0\u2430"+
    "\0\u2460\0\u2490\0\u24c0\0\u24f0\0\u2520\0\u2550\0\u2580\0\u25b0"+
    "\0\u25e0\0\u2610\0\u2640\0\u0240\0\u0240\0\u2670\0\u26a0\0\u26d0"+
    "\0\u2700\0\u2730\0\u0240\0\u0240\0\u2760\0\u2790\0\u27c0\0\u27f0"+
    "\0\u2820\0\u2850\0\u2880\0\u28b0\0\u28e0\0\u0240\0\u2910\0\u0240"+
    "\0\u2940\0\u2970\0\u29a0\0\u29d0\0\u2a00\0\u2a30\0\u2a60\0\u2a90"+
    "\0\u2ac0\0\u2af0\0\u2b20\0\u0240\0\u2b50\0\u0240\0\u2b80\0\u2bb0"+
    "\0\u2be0\0\u2c10\0\u0240\0\u0240\0\u0240\0\u2c40\0\u2c70\0\u0240"+
    "\0\u2ca0\0\u0240\0\220\0\220\0\u2cd0\0\u2d00\0\u2d30\0\u0240"+
    "\0\u0240\0\u0240\0\u2d60\0\u2d90\0\u2dc0\0\u0240\0\u2df0\0\u2e20"+
    "\0\u0240\0\u2e50\0\u2e80\0\u0240\0\u0240\0\u2eb0\0\u2ee0\0\u2f10"+
    "\0\u2f40\0\u2f70\0\u2fa0\0\u0240\0\u0240\0\u2fd0\0\u3000\0\u0240"+
    "\0\u3030\0\u0240\0\u3060\0\u3090\0\u30c0\0\u30f0\0\u0240\0\u0240"+
    "\0\u3120\0\u3150\0\u3180\0\u0240\0\u0240\0\u31b0\0\u0240\0\u0240";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[320];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\4\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\4\1\15\1\16\1\4\1\17\1\20"+
    "\1\21\2\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\22\1\36\1\37"+
    "\1\40\1\22\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\4\22\1\4\1\47\60\50\1\4\2\14\2\4\4\14"+
    "\1\4\1\14\1\4\2\14\42\4\1\51\2\0\2\51"+
    "\4\0\1\51\1\0\1\51\2\0\42\51\62\0\1\5"+
    "\75\0\4\52\2\0\30\52\2\0\2\12\1\5\55\12"+
    "\20\0\1\53\1\54\36\0\1\51\2\0\2\51\4\0"+
    "\1\51\1\0\1\51\2\0\1\51\1\55\4\51\1\56"+
    "\34\51\2\0\2\51\4\0\1\51\1\0\1\51\2\0"+
    "\1\57\1\51\2\60\1\51\1\61\6\51\1\61\26\51"+
    "\2\0\2\51\4\0\1\51\1\0\1\51\2\0\1\57"+
    "\1\51\2\21\1\51\1\61\6\51\1\61\26\51\2\0"+
    "\2\51\4\0\1\51\1\0\1\51\2\0\2\51\4\22"+
    "\2\51\30\22\3\51\2\0\2\51\4\0\1\51\1\0"+
    "\1\51\2\0\7\51\1\62\33\51\2\0\2\51\4\0"+
    "\1\51\1\0\1\51\2\0\2\51\4\63\1\51\1\64"+
    "\23\63\1\65\4\63\3\51\2\0\2\51\4\0\1\51"+
    "\1\0\1\51\2\0\2\51\4\22\2\51\1\22\1\66"+
    "\1\22\1\67\24\22\3\51\2\0\2\51\4\0\1\51"+
    "\1\0\1\51\2\0\2\51\4\22\2\51\1\70\16\22"+
    "\1\71\10\22\3\51\2\0\2\51\4\0\1\51\1\0"+
    "\1\51\2\0\2\51\4\22\2\51\10\22\1\72\3\22"+
    "\1\73\5\22\1\74\5\22\3\51\2\0\2\51\4\0"+
    "\1\51\1\0\1\51\2\0\2\51\4\22\2\51\22\22"+
    "\1\75\5\22\3\51\2\0\2\51\4\0\1\51\1\0"+
    "\1\51\2\0\2\51\4\22\2\51\11\22\1\76\1\22"+
    "\1\77\4\22\1\100\2\22\1\101\4\22\3\51\2\0"+
    "\2\51\4\0\1\51\1\0\1\51\2\0\2\51\4\22"+
    "\2\51\1\102\7\22\1\103\17\22\3\51\2\0\2\51"+
    "\4\0\1\51\1\0\1\51\2\0\2\51\4\22\2\51"+
    "\1\104\16\22\1\105\10\22\3\51\2\0\2\51\4\0"+
    "\1\51\1\0\1\51\2\0\2\51\4\22\2\51\1\106"+
    "\7\22\1\107\17\22\3\51\2\0\2\51\4\0\1\51"+
    "\1\0\1\51\2\0\2\51\4\22\2\51\13\22\1\110"+
    "\14\22\3\51\2\0\2\51\4\0\1\51\1\0\1\51"+
    "\2\0\2\51\4\22\2\51\1\111\3\22\1\112\3\22"+
    "\1\113\17\22\3\51\2\0\2\51\4\0\1\51\1\0"+
    "\1\51\2\0\2\51\4\22\2\51\1\114\13\22\1\115"+
    "\13\22\3\51\2\0\2\51\4\0\1\51\1\0\1\51"+
    "\2\0\2\51\4\22\2\51\15\22\1\116\12\22\3\51"+
    "\2\0\2\51\4\0\1\51\1\0\1\51\2\0\2\51"+
    "\4\22\2\51\22\22\1\117\5\22\3\51\2\0\2\51"+
    "\4\0\1\51\1\0\1\51\2\0\2\51\4\22\2\51"+
    "\4\22\1\120\7\22\1\121\13\22\3\51\2\0\2\51"+
    "\4\0\1\51\1\0\1\51\2\0\2\51\4\22\2\51"+
    "\10\22\1\122\2\22\1\123\14\22\3\51\2\0\2\51"+
    "\4\0\1\51\1\0\1\51\2\0\2\51\4\22\2\51"+
    "\17\22\1\124\10\22\3\51\2\0\2\51\4\0\1\51"+
    "\1\0\1\51\2\0\2\51\4\22\2\51\15\22\1\125"+
    "\12\22\3\51\2\0\2\51\4\0\1\51\1\0\1\51"+
    "\2\0\2\51\4\22\2\51\1\126\27\22\3\51\2\0"+
    "\2\51\4\0\1\51\1\0\1\51\2\0\40\51\1\127"+
    "\1\51\7\0\1\130\10\0\4\52\2\0\30\52\20\0"+
    "\1\131\4\0\1\132\6\0\1\132\43\0\1\131\1\0"+
    "\2\54\1\0\1\132\6\0\1\132\25\0\1\55\1\133"+
    "\1\0\2\51\1\0\3\133\1\55\1\133\1\55\2\133"+
    "\42\55\1\51\2\0\2\51\4\0\1\51\1\0\1\134"+
    "\2\0\43\51\2\0\2\51\4\0\1\51\1\0\1\51"+
    "\2\0\2\51\2\135\37\51\2\0\2\51\4\0\1\51"+
    "\1\0\1\51\2\0\2\51\2\60\37\51\2\0\2\51"+
    "\4\0\1\51\1\0\1\51\1\0\1\136\2\51\2\60"+
    "\36\51\1\62\2\137\2\62\4\137\1\62\1\137\1\62"+
    "\2\137\6\62\1\140\1\141\32\62\1\51\2\0\2\51"+
    "\4\0\1\51\1\0\1\51\2\0\2\51\4\63\1\51"+
    "\1\64\30\63\3\51\2\0\2\51\4\0\1\51\1\0"+
    "\1\51\2\0\2\51\4\63\1\51\1\64\4\63\1\142"+
    "\23\63\3\51\2\0\2\51\4\0\1\51\1\0\1\51"+
    "\2\0\2\51\4\22\2\51\17\22\1\143\10\22\3\51"+
    "\2\0\2\51\4\0\1\51\1\0\1\51\2\0\2\51"+
    "\4\22\2\51\23\22\1\144\4\22\3\51\2\0\2\51"+
    "\4\0\1\51\1\0\1\51\2\0\2\51\4\22\2\51"+
    "\11\22\1\145\16\22\3\51\2\0\2\51\4\0\1\51"+
    "\1\0\1\51\2\0\2\51\4\22\2\51\14\22\1\146"+
    "\13\22\3\51\2\0\2\51\4\0\1\51\1\0\1\51"+
    "\2\0\2\51\4\22\2\51\4\22\1\147\23\22\3\51"+
    "\2\0\2\51\4\0\1\51\1\0\1\51\2\0\2\51"+
    "\4\22\2\51\17\22\1\150\10\22\3\51\2\0\2\51"+
    "\4\0\1\51\1\0\1\51\2\0\2\51\4\22\2\51"+
    "\15\22\1\151\12\22\3\51\2\0\2\51\4\0\1\51"+
    "\1\0\1\51\2\0\2\51\4\22\2\51\4\22\1\152"+
    "\23\22\3\51\2\0\2\51\4\0\1\51\1\0\1\51"+
    "\2\0\2\51\4\22\2\51\5\22\1\153\22\22\3\51"+
    "\2\0\2\51\4\0\1\51\1\0\1\51\2\0\2\51"+
    "\4\22\2\51\21\22\1\154\1\22\1\155\4\22\3\51"+
    "\2\0\2\51\4\0\1\51\1\0\1\51\2\0\2\51"+
    "\4\22\2\51\2\22\1\156\25\22\3\51\2\0\2\51"+
    "\4\0\1\51\1\0\1\51\2\0\2\51\4\22\2\51"+
    "\4\22\1\157\23\22\3\51\2\0\2\51\4\0\1\51"+
    "\1\0\1\51\2\0\2\51\4\22\2\51\11\22\1\160"+
    "\16\22\3\51\2\0\2\51\4\0\1\51\1\0\1\51"+
    "\2\0\2\51\4\22\2\51\13\22\1\161\14\22\3\51"+
    "\2\0\2\51\4\0\1\51\1\0\1\51\2\0\2\51"+
    "\4\22\2\51\20\22\1\162\7\22\3\51\2\0\2\51"+
    "\4\0\1\51\1\0\1\51\2\0\2\51\4\22\2\51"+
    "\10\22\1\163\17\22\3\51\2\0\2\51\4\0\1\51"+
    "\1\0\1\51\2\0\2\51\4\22\2\51\3\22\1\164"+
    "\24\22\3\51\2\0\2\51\4\0\1\51\1\0\1\51"+
    "\2\0\2\51\4\22\2\51\20\22\1\165\7\22\3\51"+
    "\2\0\2\51\4\0\1\51\1\0\1\51\2\0\2\51"+
    "\4\22\2\51\21\22\1\166\6\22\3\51\2\0\2\51"+
    "\4\0\1\51\1\0\1\51\2\0\2\51\4\22\2\51"+
    "\6\22\1\167\10\22\1\170\10\22\3\51\2\0\2\51"+
    "\4\0\1\51\1\0\1\51\2\0\2\51\4\22\2\51"+
    "\11\22\1\171\16\22\3\51\2\0\2\51\4\0\1\51"+
    "\1\0\1\51\2\0\2\51\4\22\2\51\13\22\1\172"+
    "\14\22\3\51\2\0\2\51\4\0\1\51\1\0\1\51"+
    "\2\0\2\51\4\22\2\51\17\22\1\173\3\22\1\174"+
    "\4\22\3\51\2\0\2\51\4\0\1\51\1\0\1\51"+
    "\2\0\2\51\4\22\2\51\2\22\1\175\25\22\3\51"+
    "\2\0\2\51\4\0\1\51\1\0\1\51\2\0\2\51"+
    "\4\22\2\51\4\22\1\176\23\22\3\51\2\0\2\51"+
    "\4\0\1\51\1\0\1\51\2\0\2\51\4\22\2\51"+
    "\10\22\1\177\17\22\3\51\2\0\2\51\4\0\1\51"+
    "\1\0\1\51\2\0\2\51\4\22\2\51\26\22\1\200"+
    "\1\22\3\51\2\0\2\51\4\0\1\51\1\0\1\51"+
    "\2\0\2\51\4\22\2\51\3\22\1\201\24\22\3\51"+
    "\2\0\2\51\4\0\1\51\1\0\1\51\2\0\2\51"+
    "\4\22\2\51\6\22\1\202\21\22\3\51\2\0\2\51"+
    "\4\0\1\51\1\0\1\51\2\0\2\51\4\22\2\51"+
    "\14\22\1\203\13\22\3\51\2\0\2\51\4\0\1\51"+
    "\1\0\1\51\2\0\2\51\4\22\2\51\22\22\1\204"+
    "\5\22\3\51\2\0\2\51\4\0\1\51\1\0\1\51"+
    "\2\0\2\51\4\22\2\51\1\205\27\22\3\51\2\0"+
    "\2\51\4\0\1\51\1\0\1\51\2\0\2\51\4\22"+
    "\2\51\17\22\1\206\10\22\3\51\2\0\2\51\4\0"+
    "\1\51\1\0\1\51\2\0\21\51\1\207\20\51\20\0"+
    "\2\210\53\0\1\136\2\0\2\211\36\0\2\133\4\0"+
    "\52\133\1\134\2\212\2\134\4\212\1\134\1\212\1\51"+
    "\2\212\6\134\1\213\33\134\1\51\2\0\2\51\4\0"+
    "\1\51\1\0\1\51\2\0\2\51\2\135\1\51\1\61"+
    "\6\51\1\61\25\51\20\0\2\211\36\0\24\137\1\214"+
    "\1\215\32\137\1\51\2\0\2\51\4\0\1\51\1\0"+
    "\1\51\2\0\1\51\1\6\41\51\2\0\2\51\4\0"+
    "\1\51\1\0\1\51\2\0\2\51\4\63\1\51\1\64"+
    "\17\63\1\216\10\63\3\51\2\0\2\51\4\0\1\51"+
    "\1\0\1\51\2\0\2\51\4\22\2\51\4\22\1\217"+
    "\23\22\3\51\2\0\2\51\4\0\1\51\1\0\1\51"+
    "\2\0\2\51\4\22\2\51\10\22\1\220\17\22\3\51"+
    "\2\0\2\51\4\0\1\51\1\0\1\51\2\0\2\51"+
    "\4\22\2\51\21\22\1\221\6\22\3\51\2\0\2\51"+
    "\4\0\1\51\1\0\1\51\2\0\2\51\4\22\2\51"+
    "\12\22\1\222\15\22\3\51\2\0\2\51\4\0\1\51"+
    "\1\0\1\51\2\0\2\51\4\22\2\51\17\22\1\223"+
    "\10\22\3\51\2\0\2\51\4\0\1\51\1\0\1\51"+
    "\2\0\2\51\4\22\2\51\21\22\1\224\6\22\3\51"+
    "\2\0\2\51\4\0\1\51\1\0\1\51\2\0\2\51"+
    "\4\22\2\51\10\22\1\225\17\22\3\51\2\0\2\51"+
    "\4\0\1\51\1\0\1\51\2\0\2\51\4\22\2\51"+
    "\13\22\1\226\14\22\3\51\2\0\2\51\4\0\1\51"+
    "\1\0\1\51\2\0\2\51\4\22\2\51\14\22\1\227"+
    "\13\22\3\51\2\0\2\51\4\0\1\51\1\0\1\51"+
    "\2\0\2\51\4\22\2\51\17\22\1\230\10\22\3\51"+
    "\2\0\2\51\4\0\1\51\1\0\1\51\2\0\2\51"+
    "\4\22\2\51\10\22\1\231\11\22\1\232\5\22\3\51"+
    "\2\0\2\51\4\0\1\51\1\0\1\51\2\0\2\51"+
    "\4\22\2\51\22\22\1\233\5\22\3\51\2\0\2\51"+
    "\4\0\1\51\1\0\1\51\2\0\2\51\4\22\2\51"+
    "\17\22\1\234\10\22\3\51\2\0\2\51\4\0\1\51"+
    "\1\0\1\51\2\0\2\51\4\22\2\51\20\22\1\235"+
    "\7\22\3\51\2\0\2\51\4\0\1\51\1\0\1\51"+
    "\2\0\2\51\4\22\2\51\17\22\1\236\10\22\3\51"+
    "\2\0\2\51\4\0\1\51\1\0\1\51\2\0\2\51"+
    "\4\22\2\51\15\22\1\237\12\22\3\51\2\0\2\51"+
    "\4\0\1\51\1\0\1\51\2\0\2\51\4\22\2\51"+
    "\13\22\1\240\14\22\3\51\2\0\2\51\4\0\1\51"+
    "\1\0\1\51\2\0\2\51\4\22\2\51\1\241\27\22"+
    "\3\51\2\0\2\51\4\0\1\51\1\0\1\51\2\0"+
    "\2\51\4\22\2\51\21\22\1\242\6\22\3\51\2\0"+
    "\2\51\4\0\1\51\1\0\1\51\2\0\2\51\4\22"+
    "\2\51\4\22\1\243\23\22\3\51\2\0\2\51\4\0"+
    "\1\51\1\0\1\51\2\0\2\51\4\22\2\51\14\22"+
    "\1\244\13\22\3\51\2\0\2\51\4\0\1\51\1\0"+
    "\1\51\2\0\2\51\4\22\2\51\26\22\1\245\1\22"+
    "\3\51\2\0\2\51\4\0\1\51\1\0\1\51\2\0"+
    "\2\51\4\22\2\51\2\22\1\246\25\22\3\51\2\0"+
    "\2\51\4\0\1\51\1\0\1\51\2\0\2\51\4\22"+
    "\2\51\20\22\1\247\7\22\3\51\2\0\2\51\4\0"+
    "\1\51\1\0\1\51\2\0\2\51\4\22\2\51\17\22"+
    "\1\250\10\22\3\51\2\0\2\51\4\0\1\51\1\0"+
    "\1\51\2\0\2\51\4\22\2\51\10\22\1\251\17\22"+
    "\3\51\2\0\2\51\4\0\1\51\1\0\1\51\2\0"+
    "\2\51\4\22\2\51\7\22\1\252\20\22\3\51\2\0"+
    "\2\51\4\0\1\51\1\0\1\51\2\0\2\51\4\22"+
    "\2\51\13\22\1\253\14\22\3\51\2\0\2\51\4\0"+
    "\1\51\1\0\1\51\2\0\2\51\4\22\2\51\4\22"+
    "\1\254\23\22\3\51\2\0\2\51\4\0\1\51\1\0"+
    "\1\51\2\0\2\51\4\22\2\51\4\22\1\255\23\22"+
    "\3\51\2\0\2\51\4\0\1\51\1\0\1\51\2\0"+
    "\2\51\4\22\2\51\14\22\1\256\13\22\3\51\2\0"+
    "\2\51\4\0\1\51\1\0\1\51\2\0\2\51\4\22"+
    "\2\51\22\22\1\257\5\22\3\51\2\0\2\51\4\0"+
    "\1\51\1\0\1\51\2\0\2\51\4\22\2\51\24\22"+
    "\1\260\3\22\3\51\2\0\2\51\4\0\1\51\1\0"+
    "\1\51\2\0\2\51\4\22\2\51\4\22\1\261\23\22"+
    "\3\51\2\0\2\51\4\0\1\51\1\0\1\51\2\0"+
    "\2\51\4\22\2\51\21\22\1\262\6\22\3\51\2\0"+
    "\2\51\4\0\1\51\1\0\1\51\2\0\2\51\4\22"+
    "\2\51\10\22\1\263\17\22\3\51\2\0\2\51\4\0"+
    "\1\51\1\0\1\51\2\0\31\51\1\264\10\51\20\0"+
    "\2\210\1\0\1\132\6\0\1\132\25\0\13\212\1\0"+
    "\10\212\1\265\33\212\1\134\2\212\2\134\4\212\1\134"+
    "\1\212\1\141\2\212\6\134\1\213\33\134\25\0\1\137"+
    "\51\0\1\5\40\0\1\51\2\0\2\51\4\0\1\51"+
    "\1\0\1\51\2\0\2\51\4\63\1\51\1\64\1\266"+
    "\27\63\3\51\2\0\2\51\4\0\1\51\1\0\1\51"+
    "\2\0\2\51\4\22\2\51\2\22\1\267\1\22\1\270"+
    "\12\22\1\271\10\22\3\51\2\0\2\51\4\0\1\51"+
    "\1\0\1\51\2\0\2\51\4\22\2\51\4\22\1\272"+
    "\23\22\3\51\2\0\2\51\4\0\1\51\1\0\1\51"+
    "\2\0\2\51\4\22\2\51\1\273\27\22\3\51\2\0"+
    "\2\51\4\0\1\51\1\0\1\51\2\0\2\51\4\22"+
    "\2\51\10\22\1\274\17\22\3\51\2\0\2\51\4\0"+
    "\1\51\1\0\1\51\2\0\2\51\4\22\2\51\17\22"+
    "\1\275\10\22\3\51\2\0\2\51\4\0\1\51\1\0"+
    "\1\51\2\0\2\51\4\22\2\51\1\276\27\22\3\51"+
    "\2\0\2\51\4\0\1\51\1\0\1\51\2\0\2\51"+
    "\4\22\2\51\3\22\1\277\24\22\3\51\2\0\2\51"+
    "\4\0\1\51\1\0\1\51\2\0\2\51\4\22\2\51"+
    "\3\22\1\300\24\22\3\51\2\0\2\51\4\0\1\51"+
    "\1\0\1\51\2\0\2\51\4\22\2\51\4\22\1\301"+
    "\23\22\3\51\2\0\2\51\4\0\1\51\1\0\1\51"+
    "\2\0\2\51\4\22\2\51\1\302\27\22\3\51\2\0"+
    "\2\51\4\0\1\51\1\0\1\51\2\0\2\51\4\22"+
    "\2\51\4\22\1\303\23\22\3\51\2\0\2\51\4\0"+
    "\1\51\1\0\1\51\2\0\2\51\4\22\2\51\2\22"+
    "\1\304\25\22\3\51\2\0\2\51\4\0\1\51\1\0"+
    "\1\51\2\0\2\51\4\22\2\51\6\22\1\305\21\22"+
    "\3\51\2\0\2\51\4\0\1\51\1\0\1\51\2\0"+
    "\2\51\4\22\2\51\4\22\1\306\23\22\3\51\2\0"+
    "\2\51\4\0\1\51\1\0\1\51\2\0\2\51\4\22"+
    "\2\51\4\22\1\307\23\22\3\51\2\0\2\51\4\0"+
    "\1\51\1\0\1\51\2\0\2\51\4\22\2\51\1\310"+
    "\27\22\3\51\2\0\2\51\4\0\1\51\1\0\1\51"+
    "\2\0\2\51\4\22\2\51\2\22\1\311\25\22\3\51"+
    "\2\0\2\51\4\0\1\51\1\0\1\51\2\0\2\51"+
    "\4\22\2\51\14\22\1\312\13\22\3\51\2\0\2\51"+
    "\4\0\1\51\1\0\1\51\2\0\2\51\4\22\2\51"+
    "\17\22\1\313\10\22\3\51\2\0\2\51\4\0\1\51"+
    "\1\0\1\51\2\0\2\51\4\22\2\51\20\22\1\314"+
    "\7\22\3\51\2\0\2\51\4\0\1\51\1\0\1\51"+
    "\2\0\2\51\4\22\2\51\7\22\1\315\20\22\3\51"+
    "\2\0\2\51\4\0\1\51\1\0\1\51\2\0\2\51"+
    "\4\22\2\51\21\22\1\316\6\22\3\51\2\0\2\51"+
    "\4\0\1\51\1\0\1\51\2\0\2\51\4\22\2\51"+
    "\1\317\27\22\3\51\2\0\2\51\4\0\1\51\1\0"+
    "\1\51\2\0\2\51\4\22\2\51\3\22\1\320\24\22"+
    "\3\51\2\0\2\51\4\0\1\51\1\0\1\51\2\0"+
    "\2\51\4\22\2\51\4\22\1\321\23\22\3\51\2\0"+
    "\2\51\4\0\1\51\1\0\1\51\2\0\2\51\4\22"+
    "\2\51\20\22\1\322\7\22\3\51\2\0\2\51\4\0"+
    "\1\51\1\0\1\51\2\0\2\51\4\22\2\51\13\22"+
    "\1\323\14\22\3\51\2\0\2\51\4\0\1\51\1\0"+
    "\1\51\2\0\2\51\4\22\2\51\20\22\1\324\7\22"+
    "\3\51\2\0\2\51\4\0\1\51\1\0\1\51\2\0"+
    "\2\51\4\22\2\51\11\22\1\325\16\22\3\51\2\0"+
    "\2\51\4\0\1\51\1\0\1\51\2\0\2\51\4\22"+
    "\2\51\4\22\1\326\23\22\3\51\2\0\2\51\4\0"+
    "\1\51\1\0\1\51\2\0\2\51\4\22\2\51\1\22"+
    "\1\327\26\22\3\51\2\0\2\51\4\0\1\51\1\0"+
    "\1\51\2\0\2\51\4\22\2\51\13\22\1\330\14\22"+
    "\3\51\2\0\2\51\4\0\1\51\1\0\1\51\2\0"+
    "\2\51\4\22\2\51\17\22\1\331\10\22\3\51\2\0"+
    "\2\51\4\0\1\51\1\0\1\51\2\0\2\51\4\22"+
    "\2\51\14\22\1\332\13\22\3\51\2\0\2\51\4\0"+
    "\1\51\1\0\1\51\2\0\20\51\1\333\21\51\13\212"+
    "\1\215\10\212\1\265\33\212\1\51\2\0\2\51\4\0"+
    "\1\51\1\0\1\51\2\0\2\51\4\63\1\51\1\64"+
    "\13\63\1\334\14\63\3\51\2\0\2\51\4\0\1\51"+
    "\1\0\1\51\2\0\2\51\4\22\2\51\22\22\1\335"+
    "\5\22\3\51\2\0\2\51\4\0\1\51\1\0\1\51"+
    "\2\0\2\51\4\22\2\51\12\22\1\336\15\22\3\51"+
    "\2\0\2\51\4\0\1\51\1\0\1\51\2\0\2\51"+
    "\4\22\2\51\4\22\1\337\23\22\3\51\2\0\2\51"+
    "\4\0\1\51\1\0\1\51\2\0\2\51\4\22\2\51"+
    "\13\22\1\340\14\22\3\51\2\0\2\51\4\0\1\51"+
    "\1\0\1\51\2\0\2\51\4\22\2\51\27\22\1\341"+
    "\3\51\2\0\2\51\4\0\1\51\1\0\1\51\2\0"+
    "\2\51\4\22\2\51\20\22\1\342\7\22\3\51\2\0"+
    "\2\51\4\0\1\51\1\0\1\51\2\0\2\51\4\22"+
    "\2\51\1\343\27\22\3\51\2\0\2\51\4\0\1\51"+
    "\1\0\1\51\2\0\2\51\4\22\2\51\14\22\1\344"+
    "\13\22\3\51\2\0\2\51\4\0\1\51\1\0\1\51"+
    "\2\0\2\51\4\22\2\51\4\22\1\345\23\22\3\51"+
    "\2\0\2\51\4\0\1\51\1\0\1\51\2\0\2\51"+
    "\4\22\2\51\6\22\1\346\21\22\3\51\2\0\2\51"+
    "\4\0\1\51\1\0\1\51\2\0\2\51\4\22\2\51"+
    "\11\22\1\347\16\22\3\51\2\0\2\51\4\0\1\51"+
    "\1\0\1\51\2\0\2\51\4\22\2\51\7\22\1\350"+
    "\20\22\3\51\2\0\2\51\4\0\1\51\1\0\1\51"+
    "\2\0\2\51\4\22\2\51\17\22\1\351\10\22\3\51"+
    "\2\0\2\51\4\0\1\51\1\0\1\51\2\0\2\51"+
    "\4\22\2\51\6\22\1\352\21\22\3\51\2\0\2\51"+
    "\4\0\1\51\1\0\1\51\2\0\2\51\4\22\2\51"+
    "\17\22\1\353\10\22\3\51\2\0\2\51\4\0\1\51"+
    "\1\0\1\51\2\0\2\51\4\22\2\51\7\22\1\354"+
    "\20\22\3\51\2\0\2\51\4\0\1\51\1\0\1\51"+
    "\2\0\2\51\4\22\2\51\17\22\1\355\10\22\3\51"+
    "\2\0\2\51\4\0\1\51\1\0\1\51\2\0\2\51"+
    "\4\22\2\51\2\22\1\356\25\22\3\51\2\0\2\51"+
    "\4\0\1\51\1\0\1\51\2\0\2\51\4\22\2\51"+
    "\14\22\1\357\13\22\3\51\2\0\2\51\4\0\1\51"+
    "\1\0\1\51\2\0\2\51\4\22\2\51\10\22\1\360"+
    "\17\22\3\51\2\0\2\51\4\0\1\51\1\0\1\51"+
    "\2\0\2\51\4\22\2\51\1\361\27\22\3\51\2\0"+
    "\2\51\4\0\1\51\1\0\1\51\2\0\2\51\4\22"+
    "\2\51\1\22\1\362\26\22\3\51\2\0\2\51\4\0"+
    "\1\51\1\0\1\51\2\0\2\51\4\22\2\51\11\22"+
    "\1\363\16\22\3\51\2\0\2\51\4\0\1\51\1\0"+
    "\1\51\2\0\2\51\4\22\2\51\5\22\1\364\22\22"+
    "\3\51\2\0\2\51\4\0\1\51\1\0\1\51\2\0"+
    "\2\51\4\22\2\51\1\365\27\22\3\51\2\0\2\51"+
    "\4\0\1\51\1\0\1\51\2\0\2\51\4\22\2\51"+
    "\14\22\1\366\13\22\3\51\2\0\2\51\4\0\1\51"+
    "\1\0\1\51\2\0\2\51\4\22\2\51\4\22\1\367"+
    "\23\22\3\51\2\0\2\51\4\0\1\51\1\0\1\51"+
    "\2\0\2\51\4\22\2\51\20\22\1\370\7\22\3\51"+
    "\2\0\2\51\4\0\1\51\1\0\1\51\2\0\22\51"+
    "\1\371\20\51\2\0\2\51\4\0\1\51\1\0\1\51"+
    "\2\0\2\51\4\63\1\51\1\64\14\63\1\372\13\63"+
    "\3\51\2\0\2\51\4\0\1\51\1\0\1\51\2\0"+
    "\2\51\4\22\2\51\4\22\1\373\23\22\3\51\2\0"+
    "\2\51\4\0\1\51\1\0\1\51\2\0\2\51\4\22"+
    "\2\51\15\22\1\374\12\22\3\51\2\0\2\51\4\0"+
    "\1\51\1\0\1\51\2\0\2\51\4\22\2\51\6\22"+
    "\1\375\21\22\3\51\2\0\2\51\4\0\1\51\1\0"+
    "\1\51\2\0\2\51\4\22\2\51\21\22\1\376\6\22"+
    "\3\51\2\0\2\51\4\0\1\51\1\0\1\51\2\0"+
    "\2\51\4\22\2\51\1\377\27\22\3\51\2\0\2\51"+
    "\4\0\1\51\1\0\1\51\2\0\2\51\4\22\2\51"+
    "\21\22\1\u0100\6\22\3\51\2\0\2\51\4\0\1\51"+
    "\1\0\1\51\2\0\2\51\4\22\2\51\2\22\1\u0101"+
    "\1\22\1\u0102\12\22\1\u0103\10\22\3\51\2\0\2\51"+
    "\4\0\1\51\1\0\1\51\2\0\2\51\4\22\2\51"+
    "\1\u0104\27\22\3\51\2\0\2\51\4\0\1\51\1\0"+
    "\1\51\2\0\2\51\4\22\2\51\23\22\1\u0105\4\22"+
    "\3\51\2\0\2\51\4\0\1\51\1\0\1\51\2\0"+
    "\2\51\4\22\2\51\1\u0106\27\22\3\51\2\0\2\51"+
    "\4\0\1\51\1\0\1\51\2\0\2\51\4\22\2\51"+
    "\4\22\1\u0107\23\22\3\51\2\0\2\51\4\0\1\51"+
    "\1\0\1\51\2\0\2\51\4\22\2\51\1\u0108\27\22"+
    "\3\51\2\0\2\51\4\0\1\51\1\0\1\51\2\0"+
    "\2\51\4\22\2\51\10\22\1\u0109\17\22\3\51\2\0"+
    "\2\51\4\0\1\51\1\0\1\51\2\0\2\51\4\22"+
    "\2\51\1\u010a\27\22\3\51\2\0\2\51\4\0\1\51"+
    "\1\0\1\51\2\0\2\51\4\22\2\51\17\22\1\u010b"+
    "\10\22\3\51\2\0\2\51\4\0\1\51\1\0\1\51"+
    "\2\0\2\51\4\22\2\51\25\22\1\u010c\2\22\3\51"+
    "\2\0\2\51\4\0\1\51\1\0\1\51\2\0\2\51"+
    "\4\22\2\51\3\22\1\u010d\24\22\3\51\2\0\2\51"+
    "\4\0\1\51\1\0\1\51\2\0\2\51\4\22\2\51"+
    "\22\22\1\u010e\5\22\3\51\2\0\2\51\4\0\1\51"+
    "\1\0\1\51\2\0\2\51\4\22\2\51\1\u010f\27\22"+
    "\3\51\2\0\2\51\4\0\1\51\1\0\1\51\2\0"+
    "\2\51\4\22\2\51\14\22\1\u0110\13\22\3\51\2\0"+
    "\2\51\4\0\1\51\1\0\1\51\2\0\2\51\4\22"+
    "\2\51\11\22\1\u0111\16\22\3\51\2\0\2\51\4\0"+
    "\1\51\1\0\1\51\2\0\2\51\4\22\2\51\4\22"+
    "\1\u0112\23\22\3\51\2\0\2\51\4\0\1\51\1\0"+
    "\1\51\2\0\24\51\1\u0113\16\51\2\0\2\51\4\0"+
    "\1\51\1\0\1\51\2\0\2\51\4\63\1\51\1\u0114"+
    "\30\63\3\51\2\0\2\51\4\0\1\51\1\0\1\51"+
    "\2\0\2\51\4\22\2\51\13\22\1\u0115\14\22\3\51"+
    "\2\0\2\51\4\0\1\51\1\0\1\51\2\0\2\51"+
    "\4\22\2\51\1\u0116\27\22\3\51\2\0\2\51\4\0"+
    "\1\51\1\0\1\51\2\0\2\51\4\22\2\51\1\u0117"+
    "\27\22\3\51\2\0\2\51\4\0\1\51\1\0\1\51"+
    "\2\0\2\51\4\22\2\51\14\22\1\u0118\13\22\3\51"+
    "\2\0\2\51\4\0\1\51\1\0\1\51\2\0\2\51"+
    "\4\22\2\51\17\22\1\u0119\10\22\3\51\2\0\2\51"+
    "\4\0\1\51\1\0\1\51\2\0\2\51\4\22\2\51"+
    "\1\u011a\27\22\3\51\2\0\2\51\4\0\1\51\1\0"+
    "\1\51\2\0\2\51\4\22\2\51\22\22\1\u011b\5\22"+
    "\3\51\2\0\2\51\4\0\1\51\1\0\1\51\2\0"+
    "\2\51\4\22\2\51\12\22\1\u011c\15\22\3\51\2\0"+
    "\2\51\4\0\1\51\1\0\1\51\2\0\2\51\4\22"+
    "\2\51\4\22\1\u011d\23\22\3\51\2\0\2\51\4\0"+
    "\1\51\1\0\1\51\2\0\2\51\4\22\2\51\4\22"+
    "\1\u011e\23\22\3\51\2\0\2\51\4\0\1\51\1\0"+
    "\1\51\2\0\2\51\4\22\2\51\4\22\1\u011f\23\22"+
    "\3\51\2\0\2\51\4\0\1\51\1\0\1\51\2\0"+
    "\2\51\4\22\2\51\11\22\1\u0120\16\22\3\51\2\0"+
    "\2\51\4\0\1\51\1\0\1\51\2\0\2\51\4\22"+
    "\2\51\1\u0121\27\22\3\51\2\0\2\51\4\0\1\51"+
    "\1\0\1\51\2\0\2\51\4\22\2\51\12\22\1\u0122"+
    "\15\22\3\51\2\0\2\51\4\0\1\51\1\0\1\51"+
    "\2\0\2\51\4\22\2\51\4\22\1\u0123\23\22\3\51"+
    "\2\0\2\51\4\0\1\51\1\0\1\51\2\0\2\51"+
    "\4\22\2\51\4\22\1\u0124\23\22\3\51\2\0\2\51"+
    "\4\0\1\51\1\0\1\51\2\0\2\51\4\22\2\51"+
    "\11\22\1\u0125\16\22\3\51\2\0\2\51\4\0\1\51"+
    "\1\0\1\51\2\0\2\51\4\22\2\51\21\22\1\u0126"+
    "\6\22\3\51\2\0\2\51\4\0\1\51\1\0\1\51"+
    "\2\0\2\51\4\22\2\51\16\22\1\u0127\11\22\3\51"+
    "\2\0\2\51\4\0\1\51\1\0\1\51\2\0\2\51"+
    "\4\22\2\51\11\22\1\u0128\16\22\3\51\2\0\2\51"+
    "\4\0\1\51\1\0\1\51\2\0\2\51\4\22\2\51"+
    "\4\22\1\u0129\23\22\3\51\2\0\2\51\4\0\1\51"+
    "\1\0\1\51\2\0\2\51\4\22\2\51\15\22\1\u012a"+
    "\12\22\3\51\2\0\2\51\4\0\1\51\1\0\1\51"+
    "\2\0\2\51\4\22\2\51\6\22\1\u012b\21\22\3\51"+
    "\2\0\2\51\4\0\1\51\1\0\1\51\2\0\2\51"+
    "\4\22\2\51\13\22\1\u012c\14\22\3\51\2\0\2\51"+
    "\4\0\1\51\1\0\1\51\2\0\2\51\4\22\2\51"+
    "\14\22\1\u012d\13\22\3\51\2\0\2\51\4\0\1\51"+
    "\1\0\1\51\2\0\2\51\4\22\2\51\1\22\1\u012e"+
    "\26\22\3\51\2\0\2\51\4\0\1\51\1\0\1\51"+
    "\2\0\2\51\4\22\2\51\13\22\1\u012f\14\22\3\51"+
    "\2\0\2\51\4\0\1\51\1\0\1\51\2\0\2\51"+
    "\4\22\2\51\14\22\1\u0130\13\22\3\51\2\0\2\51"+
    "\4\0\1\51\1\0\1\51\2\0\2\51\4\22\2\51"+
    "\22\22\1\u0131\5\22\3\51\2\0\2\51\4\0\1\51"+
    "\1\0\1\51\2\0\2\51\4\22\2\51\14\22\1\u0132"+
    "\13\22\3\51\2\0\2\51\4\0\1\51\1\0\1\51"+
    "\2\0\2\51\4\22\2\51\13\22\1\u0133\14\22\3\51"+
    "\2\0\2\51\4\0\1\51\1\0\1\51\2\0\2\51"+
    "\4\22\2\51\1\u0134\27\22\3\51\2\0\2\51\4\0"+
    "\1\51\1\0\1\51\2\0\2\51\4\22\2\51\1\u0135"+
    "\27\22\3\51\2\0\2\51\4\0\1\51\1\0\1\51"+
    "\2\0\2\51\4\22\2\51\10\22\1\u0136\17\22\3\51"+
    "\2\0\2\51\4\0\1\51\1\0\1\51\2\0\2\51"+
    "\4\22\2\51\1\u0137\27\22\3\51\2\0\2\51\4\0"+
    "\1\51\1\0\1\51\2\0\2\51\4\22\2\51\4\22"+
    "\1\u0138\23\22\3\51\2\0\2\51\4\0\1\51\1\0"+
    "\1\51\2\0\2\51\4\22\2\51\21\22\1\u0139\6\22"+
    "\3\51\2\0\2\51\4\0\1\51\1\0\1\51\2\0"+
    "\2\51\4\22\2\51\16\22\1\u013a\11\22\3\51\2\0"+
    "\2\51\4\0\1\51\1\0\1\51\2\0\2\51\4\22"+
    "\2\51\11\22\1\u013b\16\22\3\51\2\0\2\51\4\0"+
    "\1\51\1\0\1\51\2\0\2\51\4\22\2\51\14\22"+
    "\1\u013c\13\22\3\51\2\0\2\51\4\0\1\51\1\0"+
    "\1\51\2\0\2\51\4\22\2\51\14\22\1\u013d\13\22"+
    "\3\51\2\0\2\51\4\0\1\51\1\0\1\51\2\0"+
    "\2\51\4\22\2\51\22\22\1\u013e\5\22\3\51\2\0"+
    "\2\51\4\0\1\51\1\0\1\51\2\0\2\51\4\22"+
    "\2\51\14\22\1\u013f\13\22\3\51\2\0\2\51\4\0"+
    "\1\51\1\0\1\51\2\0\2\51\4\22\2\51\4\22"+
    "\1\u0140\23\22\2\51";

  private static int [] zzUnpacktrans() {
    int [] result = new int[12768];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\0\2\1\1\11\2\1\1\11\3\1\2\11"+
    "\32\1\1\11\1\1\1\0\55\1\1\11\2\0\3\1"+
    "\2\0\52\1\1\0\1\1\2\0\47\1\1\0\213\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[320];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    //string para imprimir los contenidos de los tokens encontrados
    StringBuffer string = new StringBuffer();
    private int errorCount = 0;

    //symbol predefinidos por el ejemplo proporcionado por jflex
    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }

    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }

    //manejar errores y reportar
    private void handleError(String message) {
        System.err.println("ERROR: " + message + ", línea " + yyline + ", columna " + yycolumn);
        errorCount++;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { yycolumn += yylength();
    return symbol(sym.ERROR);
            }
          // fall through
          case 55: break;
          case 2:
            { yycolumn++;
        return symbol(sym.ERROR);
            }
          // fall through
          case 56: break;
          case 3:
            { 
            }
          // fall through
          case 57: break;
          case 4:
            { return symbol(sym.CHAR);
            }
          // fall through
          case 58: break;
          case 5:
            { return symbol(sym.COMILLADOBLE);
            }
          // fall through
          case 59: break;
          case 6:
            { return symbol(sym.COMILLA);
            }
          // fall through
          case 60: break;
          case 7:
            { return symbol(sym.COMMA);
            }
          // fall through
          case 61: break;
          case 8:
            { return symbol(sym.NUMERO);
            }
          // fall through
          case 62: break;
          case 9:
            { return symbol(sym.STRING);
            }
          // fall through
          case 63: break;
          case 10:
            { yycolumn++;
                                    return symbol(sym.ERROR);
            }
          // fall through
          case 64: break;
          case 11:
            { return symbol(sym.IDENTIFICADOR);
            }
          // fall through
          case 65: break;
          case 12:
            { return symbol(sym.IF);
            }
          // fall through
          case 66: break;
          case 13:
            { return symbol(sym.ELSE);
            }
          // fall through
          case 67: break;
          case 14:
            { return symbol(sym.IGUALDAD);
            }
          // fall through
          case 68: break;
          case 15:
            { return symbol(sym.TRUE);
            }
          // fall through
          case 69: break;
          case 16:
            { return symbol(sym.BREAK);
            }
          // fall through
          case 70: break;
          case 17:
            { return symbol(sym.RETURN);
            }
          // fall through
          case 71: break;
          case 18:
            { return symbol(sym.FALSE);
            }
          // fall through
          case 72: break;
          case 19:
            { return symbol(sym.MODULO);
            }
          // fall through
          case 73: break;
          case 20:
            { return symbol(sym.PRINT);
            }
          // fall through
          case 74: break;
          case 21:
            { return symbol(sym.INCREMENTO);
            }
          // fall through
          case 75: break;
          case 22:
            { return symbol(sym.DIVISION);
            }
          // fall through
          case 76: break;
          case 23:
            { return symbol(sym.DOSPUNTOS);
            }
          // fall through
          case 77: break;
          case 24:
            { return symbol(sym.FOR);
            }
          // fall through
          case 78: break;
          case 25:
            { return symbol(sym.DISYUNCION);
            }
          // fall through
          case 79: break;
          case 26:
            { return symbol(sym.DECREMENTO);
            }
          // fall through
          case 80: break;
          case 27:
            { return symbol(sym.BOOL);
            }
          // fall through
          case 81: break;
          case 28:
            { return symbol(sym.SWITCH);
            }
          // fall through
          case 82: break;
          case 29:
            { return symbol(sym.ASIGNACION);
            }
          // fall through
          case 83: break;
          case 30:
            { return symbol(sym.READ);
            }
          // fall through
          case 84: break;
          case 31:
            { return symbol(sym.CONJUNCION);
            }
          // fall through
          case 85: break;
          case 32:
            { return symbol(sym.MAYOR);
            }
          // fall through
          case 86: break;
          case 33:
            { return symbol(sym.SUMA);
            }
          // fall through
          case 87: break;
          case 34:
            { return symbol(sym.INTEGER);
            }
          // fall through
          case 88: break;
          case 35:
            { return symbol(sym.MAYORIGUAL);
            }
          // fall through
          case 89: break;
          case 36:
            { return symbol(sym.DEFAULT);
            }
          // fall through
          case 90: break;
          case 37:
            { return symbol(sym.MAIN);
            }
          // fall through
          case 91: break;
          case 38:
            { return symbol(sym.POTENCIA);
            }
          // fall through
          case 92: break;
          case 39:
            { return symbol(sym.NEGACION);
            }
          // fall through
          case 93: break;
          case 40:
            { return symbol(sym.FLOAT);
            }
          // fall through
          case 94: break;
          case 41:
            { return symbol(sym.WHILE);
            }
          // fall through
          case 95: break;
          case 42:
            { return symbol(sym.CASE);
            }
          // fall through
          case 96: break;
          case 43:
            { return symbol(sym.DIFERENTE);
            }
          // fall through
          case 97: break;
          case 44:
            { return symbol(sym.MENOR);
            }
          // fall through
          case 98: break;
          case 45:
            { return symbol(sym.MENORIGUAL);
            }
          // fall through
          case 99: break;
          case 46:
            { return symbol(sym.ENDEXPR);
            }
          // fall through
          case 100: break;
          case 47:
            { return symbol(sym.BRACEIZQ);
            }
          // fall through
          case 101: break;
          case 48:
            { return symbol(sym.PARENIZQ);
            }
          // fall through
          case 102: break;
          case 49:
            { return symbol(sym.MULTIPLICACION);
            }
          // fall through
          case 103: break;
          case 50:
            { return symbol(sym.CORCHETEIZQ);
            }
          // fall through
          case 104: break;
          case 51:
            { return symbol(sym.RESTA);
            }
          // fall through
          case 105: break;
          case 52:
            { return symbol(sym.BRACEDER);
            }
          // fall through
          case 106: break;
          case 53:
            { return symbol(sym.PARENDER);
            }
          // fall through
          case 107: break;
          case 54:
            { return symbol(sym.CORCHETEDER);
            }
          // fall through
          case 108: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
