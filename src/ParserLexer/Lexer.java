// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/ParserLexer/lexerCup.jflex

/* https://www.jflex.de/manual.html */
/* JFlex example: partial Java language lexer specification */
package ParserLexer;
import java.io.StringReader;
import java_cup.runtime.*;

/*Declaraciones y opciones*/

@SuppressWarnings("fallthrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int ERROR = 4;
  public static final int DECREMENT = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\1"+
    "\1\6\1\7\1\10\3\0\1\11\2\12\1\13\1\12"+
    "\1\14\1\12\1\0\1\15\12\16\7\0\32\17\1\12"+
    "\1\20\1\12\1\0\1\21\1\0\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\2\17\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\3\12\7\0"+
    "\1\3\64\0\1\52\10\0\1\53\u0164\0\2\3\326\0"+
    "\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\0\1\1\1\2\3\3\1\4\1\5\1\3"+
    "\1\6\1\2\1\7\1\2\1\10\2\2\22\10\1\2"+
    "\1\11\1\1\1\0\1\3\3\1\1\12\1\1\41\10"+
    "\1\1\1\10\1\3\1\1\1\0\3\1\44\10\1\1"+
    "\1\0\1\1\2\0\1\1\10\10\1\13\11\10\1\14"+
    "\3\10\1\15\13\10\1\16\2\10\1\1\1\0\1\1"+
    "\7\10\1\17\3\10\1\20\3\10\1\21\5\10\1\22"+
    "\2\10\1\23\3\10\1\24\1\25\1\10\1\26\4\10"+
    "\2\1\7\10\1\4\1\27\5\10\1\30\1\31\11\10"+
    "\1\32\1\10\1\33\2\1\11\10\1\34\1\10\1\35"+
    "\4\10\1\36\1\37\1\40\2\10\1\41\1\10\1\42"+
    "\1\43\1\44\3\10\1\45\1\46\1\47\3\10\1\50"+
    "\2\10\1\51\2\10\1\52\1\53\6\10\1\54\1\55"+
    "\2\10\1\56\1\10\1\57\4\10\1\60\1\61\3\10"+
    "\1\62\1\63\1\10\1\64\1\65";

  private static int [] zzUnpackAction() {
    int [] result = new int[306];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\204\0\260\0\204\0\334\0\260"+
    "\0\u0108\0\u0134\0\204\0\260\0\260\0\u0160\0\u018c\0\u01b8"+
    "\0\u01e4\0\u0210\0\u023c\0\u0268\0\u0294\0\u02c0\0\u02ec\0\u0318"+
    "\0\u0344\0\u0370\0\u039c\0\u03c8\0\u03f4\0\u0420\0\u044c\0\u0478"+
    "\0\u04a4\0\u04d0\0\u04fc\0\u0528\0\260\0\204\0\u0554\0\u0580"+
    "\0\u05ac\0\u05d8\0\u0604\0\204\0\u0630\0\u065c\0\u0688\0\u06b4"+
    "\0\u06e0\0\u070c\0\u0738\0\u0764\0\u0790\0\u07bc\0\u07e8\0\u0814"+
    "\0\u0840\0\u086c\0\u0898\0\u08c4\0\u08f0\0\u091c\0\u0948\0\u0974"+
    "\0\u09a0\0\u09cc\0\u09f8\0\u0a24\0\u0a50\0\u0a7c\0\u0aa8\0\u0ad4"+
    "\0\u0b00\0\u0b2c\0\u0b58\0\u0b84\0\u0bb0\0\u0bdc\0\u0c08\0\260"+
    "\0\u0c34\0\u0c60\0\u0c8c\0\u01b8\0\u0cb8\0\u0ce4\0\u0d10\0\u0d3c"+
    "\0\u0d68\0\u0d94\0\u0dc0\0\u0dec\0\u0e18\0\u0e44\0\u0e70\0\u0e9c"+
    "\0\u0ec8\0\u0ef4\0\u0f20\0\u0f4c\0\u0f78\0\u0fa4\0\u0fd0\0\u0ffc"+
    "\0\u1028\0\u1054\0\u1080\0\u10ac\0\u10d8\0\u1104\0\u1130\0\u115c"+
    "\0\u1188\0\u11b4\0\u11e0\0\u120c\0\u1238\0\u1264\0\u1290\0\u12bc"+
    "\0\u12e8\0\u1314\0\u1340\0\u136c\0\u1398\0\u13c4\0\u13f0\0\u141c"+
    "\0\u1448\0\u1474\0\u14a0\0\u14cc\0\u14f8\0\u1524\0\u1550\0\u157c"+
    "\0\u018c\0\u15a8\0\u15d4\0\u1600\0\u162c\0\u1658\0\u1684\0\u16b0"+
    "\0\u16dc\0\u1708\0\u018c\0\u1734\0\u1760\0\u178c\0\u018c\0\u17b8"+
    "\0\u17e4\0\u1810\0\u183c\0\u1868\0\u1894\0\u18c0\0\u18ec\0\u1918"+
    "\0\u1944\0\u1970\0\u199c\0\u19c8\0\u19f4\0\u1a20\0\u1a4c\0\u1a78"+
    "\0\u1aa4\0\u1ad0\0\u1afc\0\u1b28\0\u1b54\0\u1b80\0\u1bac\0\u018c"+
    "\0\u1bd8\0\u1c04\0\u1c30\0\u018c\0\u1c5c\0\u1c88\0\u1cb4\0\u018c"+
    "\0\u1ce0\0\u1d0c\0\u1d38\0\u1d64\0\u1d90\0\u018c\0\u1dbc\0\u1de8"+
    "\0\u018c\0\u1e14\0\u1e40\0\u1e6c\0\u018c\0\u018c\0\u1e98\0\u018c"+
    "\0\u1ec4\0\u1ef0\0\u1f1c\0\u1f48\0\u1f74\0\u1fa0\0\u1fcc\0\u1ff8"+
    "\0\u2024\0\u2050\0\u207c\0\u20a8\0\u20d4\0\u018c\0\u018c\0\u2100"+
    "\0\u212c\0\u2158\0\u2184\0\u21b0\0\u018c\0\u018c\0\u21dc\0\u2208"+
    "\0\u2234\0\u2260\0\u228c\0\u22b8\0\u22e4\0\u2310\0\u233c\0\u018c"+
    "\0\u2368\0\u018c\0\u2394\0\u23c0\0\u23ec\0\u2418\0\u2444\0\u2470"+
    "\0\u249c\0\u24c8\0\u24f4\0\u2520\0\u254c\0\u018c\0\u2578\0\u018c"+
    "\0\u25a4\0\u25d0\0\u25fc\0\u2628\0\u018c\0\u018c\0\u018c\0\u2654"+
    "\0\u2680\0\u018c\0\u26ac\0\u018c\0\204\0\204\0\u26d8\0\u2704"+
    "\0\u2730\0\u018c\0\u018c\0\u018c\0\u275c\0\u2788\0\u27b4\0\u018c"+
    "\0\u27e0\0\u280c\0\u018c\0\u2838\0\u2864\0\u018c\0\u018c\0\u2890"+
    "\0\u28bc\0\u28e8\0\u2914\0\u2940\0\u296c\0\u018c\0\u018c\0\u2998"+
    "\0\u29c4\0\u018c\0\u29f0\0\u018c\0\u2a1c\0\u2a48\0\u2a74\0\u2aa0"+
    "\0\u018c\0\u018c\0\u2acc\0\u2af8\0\u2b24\0\u018c\0\u018c\0\u2b50"+
    "\0\u018c\0\u018c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[306];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\4\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\4\1\15\1\16\1\4\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\17\1\33\1\34\1\35\1\17\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\4\17\1\4\1\44"+
    "\54\45\1\4\2\14\2\4\4\14\1\4\1\14\1\4"+
    "\1\14\37\4\1\46\2\0\2\46\4\0\1\46\1\0"+
    "\1\46\1\0\37\46\56\0\1\5\67\0\2\47\2\0"+
    "\30\47\2\0\2\12\1\5\51\12\1\46\2\0\2\46"+
    "\4\0\1\46\1\0\1\46\1\0\1\50\2\46\1\51"+
    "\34\46\2\0\2\46\4\0\1\46\1\0\1\46\1\0"+
    "\1\46\2\17\2\46\30\17\3\46\2\0\2\46\4\0"+
    "\1\46\1\0\1\46\1\0\4\46\1\52\33\46\2\0"+
    "\2\46\4\0\1\46\1\0\1\46\1\0\1\46\2\53"+
    "\1\46\1\54\23\53\1\55\4\53\3\46\2\0\2\46"+
    "\4\0\1\46\1\0\1\46\1\0\1\46\2\17\2\46"+
    "\1\17\1\56\1\17\1\57\24\17\3\46\2\0\2\46"+
    "\4\0\1\46\1\0\1\46\1\0\1\46\2\17\2\46"+
    "\1\60\16\17\1\61\10\17\3\46\2\0\2\46\4\0"+
    "\1\46\1\0\1\46\1\0\1\46\2\17\2\46\10\17"+
    "\1\62\3\17\1\63\5\17\1\64\5\17\3\46\2\0"+
    "\2\46\4\0\1\46\1\0\1\46\1\0\1\46\2\17"+
    "\2\46\22\17\1\65\5\17\3\46\2\0\2\46\4\0"+
    "\1\46\1\0\1\46\1\0\1\46\2\17\2\46\11\17"+
    "\1\66\1\17\1\67\4\17\1\70\2\17\1\71\4\17"+
    "\3\46\2\0\2\46\4\0\1\46\1\0\1\46\1\0"+
    "\1\46\2\17\2\46\1\72\7\17\1\73\17\17\3\46"+
    "\2\0\2\46\4\0\1\46\1\0\1\46\1\0\1\46"+
    "\2\17\2\46\1\74\16\17\1\75\10\17\3\46\2\0"+
    "\2\46\4\0\1\46\1\0\1\46\1\0\1\46\2\17"+
    "\2\46\1\76\7\17\1\77\17\17\3\46\2\0\2\46"+
    "\4\0\1\46\1\0\1\46\1\0\1\46\2\17\2\46"+
    "\13\17\1\100\14\17\3\46\2\0\2\46\4\0\1\46"+
    "\1\0\1\46\1\0\1\46\2\17\2\46\1\101\3\17"+
    "\1\102\3\17\1\103\17\17\3\46\2\0\2\46\4\0"+
    "\1\46\1\0\1\46\1\0\1\46\2\17\2\46\1\104"+
    "\13\17\1\105\13\17\3\46\2\0\2\46\4\0\1\46"+
    "\1\0\1\46\1\0\1\46\2\17\2\46\15\17\1\106"+
    "\12\17\3\46\2\0\2\46\4\0\1\46\1\0\1\46"+
    "\1\0\1\46\2\17\2\46\22\17\1\107\5\17\3\46"+
    "\2\0\2\46\4\0\1\46\1\0\1\46\1\0\1\46"+
    "\2\17\2\46\4\17\1\110\7\17\1\111\13\17\3\46"+
    "\2\0\2\46\4\0\1\46\1\0\1\46\1\0\1\46"+
    "\2\17\2\46\10\17\1\112\2\17\1\113\14\17\3\46"+
    "\2\0\2\46\4\0\1\46\1\0\1\46\1\0\1\46"+
    "\2\17\2\46\17\17\1\114\10\17\3\46\2\0\2\46"+
    "\4\0\1\46\1\0\1\46\1\0\1\46\2\17\2\46"+
    "\15\17\1\115\12\17\3\46\2\0\2\46\4\0\1\46"+
    "\1\0\1\46\1\0\1\46\2\17\2\46\1\116\27\17"+
    "\3\46\2\0\2\46\4\0\1\46\1\0\1\46\1\0"+
    "\35\46\1\117\1\46\7\0\1\120\6\0\2\47\2\0"+
    "\30\47\2\0\1\50\1\121\1\0\2\46\1\0\3\121"+
    "\1\50\1\121\1\50\1\121\37\50\1\46\2\0\2\46"+
    "\4\0\1\46\1\0\1\122\1\0\37\46\1\52\2\123"+
    "\2\52\4\123\1\52\1\123\1\52\1\123\3\52\1\124"+
    "\1\125\32\52\1\46\2\0\2\46\4\0\1\46\1\0"+
    "\1\46\1\0\1\46\2\53\1\46\1\54\30\53\3\46"+
    "\2\0\2\46\4\0\1\46\1\0\1\46\1\0\1\46"+
    "\2\53\1\46\1\54\4\53\1\126\23\53\3\46\2\0"+
    "\2\46\4\0\1\46\1\0\1\46\1\0\1\46\2\17"+
    "\2\46\17\17\1\127\10\17\3\46\2\0\2\46\4\0"+
    "\1\46\1\0\1\46\1\0\1\46\2\17\2\46\23\17"+
    "\1\130\4\17\3\46\2\0\2\46\4\0\1\46\1\0"+
    "\1\46\1\0\1\46\2\17\2\46\11\17\1\131\16\17"+
    "\3\46\2\0\2\46\4\0\1\46\1\0\1\46\1\0"+
    "\1\46\2\17\2\46\14\17\1\132\13\17\3\46\2\0"+
    "\2\46\4\0\1\46\1\0\1\46\1\0\1\46\2\17"+
    "\2\46\4\17\1\133\23\17\3\46\2\0\2\46\4\0"+
    "\1\46\1\0\1\46\1\0\1\46\2\17\2\46\17\17"+
    "\1\134\10\17\3\46\2\0\2\46\4\0\1\46\1\0"+
    "\1\46\1\0\1\46\2\17\2\46\15\17\1\135\12\17"+
    "\3\46\2\0\2\46\4\0\1\46\1\0\1\46\1\0"+
    "\1\46\2\17\2\46\4\17\1\136\23\17\3\46\2\0"+
    "\2\46\4\0\1\46\1\0\1\46\1\0\1\46\2\17"+
    "\2\46\5\17\1\137\22\17\3\46\2\0\2\46\4\0"+
    "\1\46\1\0\1\46\1\0\1\46\2\17\2\46\21\17"+
    "\1\140\1\17\1\141\4\17\3\46\2\0\2\46\4\0"+
    "\1\46\1\0\1\46\1\0\1\46\2\17\2\46\2\17"+
    "\1\142\25\17\3\46\2\0\2\46\4\0\1\46\1\0"+
    "\1\46\1\0\1\46\2\17\2\46\4\17\1\143\23\17"+
    "\3\46\2\0\2\46\4\0\1\46\1\0\1\46\1\0"+
    "\1\46\2\17\2\46\11\17\1\144\16\17\3\46\2\0"+
    "\2\46\4\0\1\46\1\0\1\46\1\0\1\46\2\17"+
    "\2\46\13\17\1\145\14\17\3\46\2\0\2\46\4\0"+
    "\1\46\1\0\1\46\1\0\1\46\2\17\2\46\20\17"+
    "\1\146\7\17\3\46\2\0\2\46\4\0\1\46\1\0"+
    "\1\46\1\0\1\46\2\17\2\46\10\17\1\147\17\17"+
    "\3\46\2\0\2\46\4\0\1\46\1\0\1\46\1\0"+
    "\1\46\2\17\2\46\3\17\1\150\24\17\3\46\2\0"+
    "\2\46\4\0\1\46\1\0\1\46\1\0\1\46\2\17"+
    "\2\46\20\17\1\151\7\17\3\46\2\0\2\46\4\0"+
    "\1\46\1\0\1\46\1\0\1\46\2\17\2\46\21\17"+
    "\1\152\6\17\3\46\2\0\2\46\4\0\1\46\1\0"+
    "\1\46\1\0\1\46\2\17\2\46\6\17\1\153\10\17"+
    "\1\154\10\17\3\46\2\0\2\46\4\0\1\46\1\0"+
    "\1\46\1\0\1\46\2\17\2\46\11\17\1\155\16\17"+
    "\3\46\2\0\2\46\4\0\1\46\1\0\1\46\1\0"+
    "\1\46\2\17\2\46\13\17\1\156\14\17\3\46\2\0"+
    "\2\46\4\0\1\46\1\0\1\46\1\0\1\46\2\17"+
    "\2\46\17\17\1\157\3\17\1\160\4\17\3\46\2\0"+
    "\2\46\4\0\1\46\1\0\1\46\1\0\1\46\2\17"+
    "\2\46\2\17\1\161\25\17\3\46\2\0\2\46\4\0"+
    "\1\46\1\0\1\46\1\0\1\46\2\17\2\46\4\17"+
    "\1\162\23\17\3\46\2\0\2\46\4\0\1\46\1\0"+
    "\1\46\1\0\1\46\2\17\2\46\10\17\1\163\17\17"+
    "\3\46\2\0\2\46\4\0\1\46\1\0\1\46\1\0"+
    "\1\46\2\17\2\46\26\17\1\164\1\17\3\46\2\0"+
    "\2\46\4\0\1\46\1\0\1\46\1\0\1\46\2\17"+
    "\2\46\3\17\1\165\24\17\3\46\2\0\2\46\4\0"+
    "\1\46\1\0\1\46\1\0\1\46\2\17\2\46\6\17"+
    "\1\166\21\17\3\46\2\0\2\46\4\0\1\46\1\0"+
    "\1\46\1\0\1\46\2\17\2\46\14\17\1\167\13\17"+
    "\3\46\2\0\2\46\4\0\1\46\1\0\1\46\1\0"+
    "\1\46\2\17\2\46\22\17\1\170\5\17\3\46\2\0"+
    "\2\46\4\0\1\46\1\0\1\46\1\0\1\46\2\17"+
    "\2\46\1\171\27\17\3\46\2\0\2\46\4\0\1\46"+
    "\1\0\1\46\1\0\1\46\2\17\2\46\17\17\1\172"+
    "\10\17\3\46\2\0\2\46\4\0\1\46\1\0\1\46"+
    "\1\0\16\46\1\173\20\46\2\121\4\0\46\121\1\122"+
    "\2\174\2\122\4\174\1\122\1\174\1\46\1\174\3\122"+
    "\1\175\33\122\20\123\1\176\1\177\32\123\1\46\2\0"+
    "\2\46\4\0\1\46\1\0\1\46\1\0\1\6\37\46"+
    "\2\0\2\46\4\0\1\46\1\0\1\46\1\0\1\46"+
    "\2\53\1\46\1\54\17\53\1\200\10\53\3\46\2\0"+
    "\2\46\4\0\1\46\1\0\1\46\1\0\1\46\2\17"+
    "\2\46\4\17\1\201\23\17\3\46\2\0\2\46\4\0"+
    "\1\46\1\0\1\46\1\0\1\46\2\17\2\46\10\17"+
    "\1\202\17\17\3\46\2\0\2\46\4\0\1\46\1\0"+
    "\1\46\1\0\1\46\2\17\2\46\21\17\1\203\6\17"+
    "\3\46\2\0\2\46\4\0\1\46\1\0\1\46\1\0"+
    "\1\46\2\17\2\46\12\17\1\204\15\17\3\46\2\0"+
    "\2\46\4\0\1\46\1\0\1\46\1\0\1\46\2\17"+
    "\2\46\17\17\1\205\10\17\3\46\2\0\2\46\4\0"+
    "\1\46\1\0\1\46\1\0\1\46\2\17\2\46\21\17"+
    "\1\206\6\17\3\46\2\0\2\46\4\0\1\46\1\0"+
    "\1\46\1\0\1\46\2\17\2\46\10\17\1\207\17\17"+
    "\3\46\2\0\2\46\4\0\1\46\1\0\1\46\1\0"+
    "\1\46\2\17\2\46\13\17\1\210\14\17\3\46\2\0"+
    "\2\46\4\0\1\46\1\0\1\46\1\0\1\46\2\17"+
    "\2\46\14\17\1\211\13\17\3\46\2\0\2\46\4\0"+
    "\1\46\1\0\1\46\1\0\1\46\2\17\2\46\17\17"+
    "\1\212\10\17\3\46\2\0\2\46\4\0\1\46\1\0"+
    "\1\46\1\0\1\46\2\17\2\46\10\17\1\213\11\17"+
    "\1\214\5\17\3\46\2\0\2\46\4\0\1\46\1\0"+
    "\1\46\1\0\1\46\2\17\2\46\22\17\1\215\5\17"+
    "\3\46\2\0\2\46\4\0\1\46\1\0\1\46\1\0"+
    "\1\46\2\17\2\46\17\17\1\216\10\17\3\46\2\0"+
    "\2\46\4\0\1\46\1\0\1\46\1\0\1\46\2\17"+
    "\2\46\20\17\1\217\7\17\3\46\2\0\2\46\4\0"+
    "\1\46\1\0\1\46\1\0\1\46\2\17\2\46\17\17"+
    "\1\220\10\17\3\46\2\0\2\46\4\0\1\46\1\0"+
    "\1\46\1\0\1\46\2\17\2\46\15\17\1\221\12\17"+
    "\3\46\2\0\2\46\4\0\1\46\1\0\1\46\1\0"+
    "\1\46\2\17\2\46\13\17\1\222\14\17\3\46\2\0"+
    "\2\46\4\0\1\46\1\0\1\46\1\0\1\46\2\17"+
    "\2\46\1\223\27\17\3\46\2\0\2\46\4\0\1\46"+
    "\1\0\1\46\1\0\1\46\2\17\2\46\21\17\1\224"+
    "\6\17\3\46\2\0\2\46\4\0\1\46\1\0\1\46"+
    "\1\0\1\46\2\17\2\46\4\17\1\225\23\17\3\46"+
    "\2\0\2\46\4\0\1\46\1\0\1\46\1\0\1\46"+
    "\2\17\2\46\14\17\1\226\13\17\3\46\2\0\2\46"+
    "\4\0\1\46\1\0\1\46\1\0\1\46\2\17\2\46"+
    "\26\17\1\227\1\17\3\46\2\0\2\46\4\0\1\46"+
    "\1\0\1\46\1\0\1\46\2\17\2\46\2\17\1\230"+
    "\25\17\3\46\2\0\2\46\4\0\1\46\1\0\1\46"+
    "\1\0\1\46\2\17\2\46\20\17\1\231\7\17\3\46"+
    "\2\0\2\46\4\0\1\46\1\0\1\46\1\0\1\46"+
    "\2\17\2\46\17\17\1\232\10\17\3\46\2\0\2\46"+
    "\4\0\1\46\1\0\1\46\1\0\1\46\2\17\2\46"+
    "\10\17\1\233\17\17\3\46\2\0\2\46\4\0\1\46"+
    "\1\0\1\46\1\0\1\46\2\17\2\46\7\17\1\234"+
    "\20\17\3\46\2\0\2\46\4\0\1\46\1\0\1\46"+
    "\1\0\1\46\2\17\2\46\13\17\1\235\14\17\3\46"+
    "\2\0\2\46\4\0\1\46\1\0\1\46\1\0\1\46"+
    "\2\17\2\46\4\17\1\236\23\17\3\46\2\0\2\46"+
    "\4\0\1\46\1\0\1\46\1\0\1\46\2\17\2\46"+
    "\4\17\1\237\23\17\3\46\2\0\2\46\4\0\1\46"+
    "\1\0\1\46\1\0\1\46\2\17\2\46\14\17\1\240"+
    "\13\17\3\46\2\0\2\46\4\0\1\46\1\0\1\46"+
    "\1\0\1\46\2\17\2\46\22\17\1\241\5\17\3\46"+
    "\2\0\2\46\4\0\1\46\1\0\1\46\1\0\1\46"+
    "\2\17\2\46\24\17\1\242\3\17\3\46\2\0\2\46"+
    "\4\0\1\46\1\0\1\46\1\0\1\46\2\17\2\46"+
    "\4\17\1\243\23\17\3\46\2\0\2\46\4\0\1\46"+
    "\1\0\1\46\1\0\1\46\2\17\2\46\21\17\1\244"+
    "\6\17\3\46\2\0\2\46\4\0\1\46\1\0\1\46"+
    "\1\0\1\46\2\17\2\46\10\17\1\245\17\17\3\46"+
    "\2\0\2\46\4\0\1\46\1\0\1\46\1\0\26\46"+
    "\1\246\10\46\13\174\1\0\4\174\1\247\33\174\1\122"+
    "\2\174\2\122\4\174\1\122\1\174\1\125\1\174\3\122"+
    "\1\175\33\122\21\0\1\123\47\0\1\5\36\0\1\46"+
    "\2\0\2\46\4\0\1\46\1\0\1\46\1\0\1\46"+
    "\2\53\1\46\1\54\1\250\27\53\3\46\2\0\2\46"+
    "\4\0\1\46\1\0\1\46\1\0\1\46\2\17\2\46"+
    "\2\17\1\251\1\17\1\252\12\17\1\253\10\17\3\46"+
    "\2\0\2\46\4\0\1\46\1\0\1\46\1\0\1\46"+
    "\2\17\2\46\4\17\1\254\23\17\3\46\2\0\2\46"+
    "\4\0\1\46\1\0\1\46\1\0\1\46\2\17\2\46"+
    "\1\255\27\17\3\46\2\0\2\46\4\0\1\46\1\0"+
    "\1\46\1\0\1\46\2\17\2\46\10\17\1\256\17\17"+
    "\3\46\2\0\2\46\4\0\1\46\1\0\1\46\1\0"+
    "\1\46\2\17\2\46\17\17\1\257\10\17\3\46\2\0"+
    "\2\46\4\0\1\46\1\0\1\46\1\0\1\46\2\17"+
    "\2\46\1\260\27\17\3\46\2\0\2\46\4\0\1\46"+
    "\1\0\1\46\1\0\1\46\2\17\2\46\3\17\1\261"+
    "\24\17\3\46\2\0\2\46\4\0\1\46\1\0\1\46"+
    "\1\0\1\46\2\17\2\46\3\17\1\262\24\17\3\46"+
    "\2\0\2\46\4\0\1\46\1\0\1\46\1\0\1\46"+
    "\2\17\2\46\4\17\1\263\23\17\3\46\2\0\2\46"+
    "\4\0\1\46\1\0\1\46\1\0\1\46\2\17\2\46"+
    "\1\264\27\17\3\46\2\0\2\46\4\0\1\46\1\0"+
    "\1\46\1\0\1\46\2\17\2\46\4\17\1\265\23\17"+
    "\3\46\2\0\2\46\4\0\1\46\1\0\1\46\1\0"+
    "\1\46\2\17\2\46\2\17\1\266\25\17\3\46\2\0"+
    "\2\46\4\0\1\46\1\0\1\46\1\0\1\46\2\17"+
    "\2\46\6\17\1\267\21\17\3\46\2\0\2\46\4\0"+
    "\1\46\1\0\1\46\1\0\1\46\2\17\2\46\4\17"+
    "\1\270\23\17\3\46\2\0\2\46\4\0\1\46\1\0"+
    "\1\46\1\0\1\46\2\17\2\46\4\17\1\271\23\17"+
    "\3\46\2\0\2\46\4\0\1\46\1\0\1\46\1\0"+
    "\1\46\2\17\2\46\1\272\27\17\3\46\2\0\2\46"+
    "\4\0\1\46\1\0\1\46\1\0\1\46\2\17\2\46"+
    "\2\17\1\273\25\17\3\46\2\0\2\46\4\0\1\46"+
    "\1\0\1\46\1\0\1\46\2\17\2\46\14\17\1\274"+
    "\13\17\3\46\2\0\2\46\4\0\1\46\1\0\1\46"+
    "\1\0\1\46\2\17\2\46\17\17\1\275\10\17\3\46"+
    "\2\0\2\46\4\0\1\46\1\0\1\46\1\0\1\46"+
    "\2\17\2\46\20\17\1\276\7\17\3\46\2\0\2\46"+
    "\4\0\1\46\1\0\1\46\1\0\1\46\2\17\2\46"+
    "\7\17\1\277\20\17\3\46\2\0\2\46\4\0\1\46"+
    "\1\0\1\46\1\0\1\46\2\17\2\46\21\17\1\300"+
    "\6\17\3\46\2\0\2\46\4\0\1\46\1\0\1\46"+
    "\1\0\1\46\2\17\2\46\1\301\27\17\3\46\2\0"+
    "\2\46\4\0\1\46\1\0\1\46\1\0\1\46\2\17"+
    "\2\46\3\17\1\302\24\17\3\46\2\0\2\46\4\0"+
    "\1\46\1\0\1\46\1\0\1\46\2\17\2\46\4\17"+
    "\1\303\23\17\3\46\2\0\2\46\4\0\1\46\1\0"+
    "\1\46\1\0\1\46\2\17\2\46\20\17\1\304\7\17"+
    "\3\46\2\0\2\46\4\0\1\46\1\0\1\46\1\0"+
    "\1\46\2\17\2\46\13\17\1\305\14\17\3\46\2\0"+
    "\2\46\4\0\1\46\1\0\1\46\1\0\1\46\2\17"+
    "\2\46\20\17\1\306\7\17\3\46\2\0\2\46\4\0"+
    "\1\46\1\0\1\46\1\0\1\46\2\17\2\46\11\17"+
    "\1\307\16\17\3\46\2\0\2\46\4\0\1\46\1\0"+
    "\1\46\1\0\1\46\2\17\2\46\4\17\1\310\23\17"+
    "\3\46\2\0\2\46\4\0\1\46\1\0\1\46\1\0"+
    "\1\46\2\17\2\46\1\17\1\311\26\17\3\46\2\0"+
    "\2\46\4\0\1\46\1\0\1\46\1\0\1\46\2\17"+
    "\2\46\13\17\1\312\14\17\3\46\2\0\2\46\4\0"+
    "\1\46\1\0\1\46\1\0\1\46\2\17\2\46\17\17"+
    "\1\313\10\17\3\46\2\0\2\46\4\0\1\46\1\0"+
    "\1\46\1\0\1\46\2\17\2\46\14\17\1\314\13\17"+
    "\3\46\2\0\2\46\4\0\1\46\1\0\1\46\1\0"+
    "\15\46\1\315\21\46\13\174\1\177\4\174\1\247\33\174"+
    "\1\46\2\0\2\46\4\0\1\46\1\0\1\46\1\0"+
    "\1\46\2\53\1\46\1\54\13\53\1\316\14\53\3\46"+
    "\2\0\2\46\4\0\1\46\1\0\1\46\1\0\1\46"+
    "\2\17\2\46\22\17\1\317\5\17\3\46\2\0\2\46"+
    "\4\0\1\46\1\0\1\46\1\0\1\46\2\17\2\46"+
    "\12\17\1\320\15\17\3\46\2\0\2\46\4\0\1\46"+
    "\1\0\1\46\1\0\1\46\2\17\2\46\4\17\1\321"+
    "\23\17\3\46\2\0\2\46\4\0\1\46\1\0\1\46"+
    "\1\0\1\46\2\17\2\46\13\17\1\322\14\17\3\46"+
    "\2\0\2\46\4\0\1\46\1\0\1\46\1\0\1\46"+
    "\2\17\2\46\27\17\1\323\3\46\2\0\2\46\4\0"+
    "\1\46\1\0\1\46\1\0\1\46\2\17\2\46\20\17"+
    "\1\324\7\17\3\46\2\0\2\46\4\0\1\46\1\0"+
    "\1\46\1\0\1\46\2\17\2\46\1\325\27\17\3\46"+
    "\2\0\2\46\4\0\1\46\1\0\1\46\1\0\1\46"+
    "\2\17\2\46\14\17\1\326\13\17\3\46\2\0\2\46"+
    "\4\0\1\46\1\0\1\46\1\0\1\46\2\17\2\46"+
    "\4\17\1\327\23\17\3\46\2\0\2\46\4\0\1\46"+
    "\1\0\1\46\1\0\1\46\2\17\2\46\6\17\1\330"+
    "\21\17\3\46\2\0\2\46\4\0\1\46\1\0\1\46"+
    "\1\0\1\46\2\17\2\46\11\17\1\331\16\17\3\46"+
    "\2\0\2\46\4\0\1\46\1\0\1\46\1\0\1\46"+
    "\2\17\2\46\7\17\1\332\20\17\3\46\2\0\2\46"+
    "\4\0\1\46\1\0\1\46\1\0\1\46\2\17\2\46"+
    "\17\17\1\333\10\17\3\46\2\0\2\46\4\0\1\46"+
    "\1\0\1\46\1\0\1\46\2\17\2\46\6\17\1\334"+
    "\21\17\3\46\2\0\2\46\4\0\1\46\1\0\1\46"+
    "\1\0\1\46\2\17\2\46\17\17\1\335\10\17\3\46"+
    "\2\0\2\46\4\0\1\46\1\0\1\46\1\0\1\46"+
    "\2\17\2\46\7\17\1\336\20\17\3\46\2\0\2\46"+
    "\4\0\1\46\1\0\1\46\1\0\1\46\2\17\2\46"+
    "\17\17\1\337\10\17\3\46\2\0\2\46\4\0\1\46"+
    "\1\0\1\46\1\0\1\46\2\17\2\46\2\17\1\340"+
    "\25\17\3\46\2\0\2\46\4\0\1\46\1\0\1\46"+
    "\1\0\1\46\2\17\2\46\14\17\1\341\13\17\3\46"+
    "\2\0\2\46\4\0\1\46\1\0\1\46\1\0\1\46"+
    "\2\17\2\46\10\17\1\342\17\17\3\46\2\0\2\46"+
    "\4\0\1\46\1\0\1\46\1\0\1\46\2\17\2\46"+
    "\1\343\27\17\3\46\2\0\2\46\4\0\1\46\1\0"+
    "\1\46\1\0\1\46\2\17\2\46\1\17\1\344\26\17"+
    "\3\46\2\0\2\46\4\0\1\46\1\0\1\46\1\0"+
    "\1\46\2\17\2\46\11\17\1\345\16\17\3\46\2\0"+
    "\2\46\4\0\1\46\1\0\1\46\1\0\1\46\2\17"+
    "\2\46\5\17\1\346\22\17\3\46\2\0\2\46\4\0"+
    "\1\46\1\0\1\46\1\0\1\46\2\17\2\46\1\347"+
    "\27\17\3\46\2\0\2\46\4\0\1\46\1\0\1\46"+
    "\1\0\1\46\2\17\2\46\14\17\1\350\13\17\3\46"+
    "\2\0\2\46\4\0\1\46\1\0\1\46\1\0\1\46"+
    "\2\17\2\46\4\17\1\351\23\17\3\46\2\0\2\46"+
    "\4\0\1\46\1\0\1\46\1\0\1\46\2\17\2\46"+
    "\20\17\1\352\7\17\3\46\2\0\2\46\4\0\1\46"+
    "\1\0\1\46\1\0\17\46\1\353\20\46\2\0\2\46"+
    "\4\0\1\46\1\0\1\46\1\0\1\46\2\53\1\46"+
    "\1\54\14\53\1\354\13\53\3\46\2\0\2\46\4\0"+
    "\1\46\1\0\1\46\1\0\1\46\2\17\2\46\4\17"+
    "\1\355\23\17\3\46\2\0\2\46\4\0\1\46\1\0"+
    "\1\46\1\0\1\46\2\17\2\46\15\17\1\356\12\17"+
    "\3\46\2\0\2\46\4\0\1\46\1\0\1\46\1\0"+
    "\1\46\2\17\2\46\6\17\1\357\21\17\3\46\2\0"+
    "\2\46\4\0\1\46\1\0\1\46\1\0\1\46\2\17"+
    "\2\46\21\17\1\360\6\17\3\46\2\0\2\46\4\0"+
    "\1\46\1\0\1\46\1\0\1\46\2\17\2\46\1\361"+
    "\27\17\3\46\2\0\2\46\4\0\1\46\1\0\1\46"+
    "\1\0\1\46\2\17\2\46\21\17\1\362\6\17\3\46"+
    "\2\0\2\46\4\0\1\46\1\0\1\46\1\0\1\46"+
    "\2\17\2\46\2\17\1\363\1\17\1\364\12\17\1\365"+
    "\10\17\3\46\2\0\2\46\4\0\1\46\1\0\1\46"+
    "\1\0\1\46\2\17\2\46\1\366\27\17\3\46\2\0"+
    "\2\46\4\0\1\46\1\0\1\46\1\0\1\46\2\17"+
    "\2\46\23\17\1\367\4\17\3\46\2\0\2\46\4\0"+
    "\1\46\1\0\1\46\1\0\1\46\2\17\2\46\1\370"+
    "\27\17\3\46\2\0\2\46\4\0\1\46\1\0\1\46"+
    "\1\0\1\46\2\17\2\46\4\17\1\371\23\17\3\46"+
    "\2\0\2\46\4\0\1\46\1\0\1\46\1\0\1\46"+
    "\2\17\2\46\1\372\27\17\3\46\2\0\2\46\4\0"+
    "\1\46\1\0\1\46\1\0\1\46\2\17\2\46\10\17"+
    "\1\373\17\17\3\46\2\0\2\46\4\0\1\46\1\0"+
    "\1\46\1\0\1\46\2\17\2\46\1\374\27\17\3\46"+
    "\2\0\2\46\4\0\1\46\1\0\1\46\1\0\1\46"+
    "\2\17\2\46\17\17\1\375\10\17\3\46\2\0\2\46"+
    "\4\0\1\46\1\0\1\46\1\0\1\46\2\17\2\46"+
    "\25\17\1\376\2\17\3\46\2\0\2\46\4\0\1\46"+
    "\1\0\1\46\1\0\1\46\2\17\2\46\3\17\1\377"+
    "\24\17\3\46\2\0\2\46\4\0\1\46\1\0\1\46"+
    "\1\0\1\46\2\17\2\46\22\17\1\u0100\5\17\3\46"+
    "\2\0\2\46\4\0\1\46\1\0\1\46\1\0\1\46"+
    "\2\17\2\46\1\u0101\27\17\3\46\2\0\2\46\4\0"+
    "\1\46\1\0\1\46\1\0\1\46\2\17\2\46\14\17"+
    "\1\u0102\13\17\3\46\2\0\2\46\4\0\1\46\1\0"+
    "\1\46\1\0\1\46\2\17\2\46\11\17\1\u0103\16\17"+
    "\3\46\2\0\2\46\4\0\1\46\1\0\1\46\1\0"+
    "\1\46\2\17\2\46\4\17\1\u0104\23\17\3\46\2\0"+
    "\2\46\4\0\1\46\1\0\1\46\1\0\21\46\1\u0105"+
    "\16\46\2\0\2\46\4\0\1\46\1\0\1\46\1\0"+
    "\1\46\2\53\1\46\1\u0106\30\53\3\46\2\0\2\46"+
    "\4\0\1\46\1\0\1\46\1\0\1\46\2\17\2\46"+
    "\13\17\1\u0107\14\17\3\46\2\0\2\46\4\0\1\46"+
    "\1\0\1\46\1\0\1\46\2\17\2\46\1\u0108\27\17"+
    "\3\46\2\0\2\46\4\0\1\46\1\0\1\46\1\0"+
    "\1\46\2\17\2\46\1\u0109\27\17\3\46\2\0\2\46"+
    "\4\0\1\46\1\0\1\46\1\0\1\46\2\17\2\46"+
    "\14\17\1\u010a\13\17\3\46\2\0\2\46\4\0\1\46"+
    "\1\0\1\46\1\0\1\46\2\17\2\46\17\17\1\u010b"+
    "\10\17\3\46\2\0\2\46\4\0\1\46\1\0\1\46"+
    "\1\0\1\46\2\17\2\46\1\u010c\27\17\3\46\2\0"+
    "\2\46\4\0\1\46\1\0\1\46\1\0\1\46\2\17"+
    "\2\46\22\17\1\u010d\5\17\3\46\2\0\2\46\4\0"+
    "\1\46\1\0\1\46\1\0\1\46\2\17\2\46\12\17"+
    "\1\u010e\15\17\3\46\2\0\2\46\4\0\1\46\1\0"+
    "\1\46\1\0\1\46\2\17\2\46\4\17\1\u010f\23\17"+
    "\3\46\2\0\2\46\4\0\1\46\1\0\1\46\1\0"+
    "\1\46\2\17\2\46\4\17\1\u0110\23\17\3\46\2\0"+
    "\2\46\4\0\1\46\1\0\1\46\1\0\1\46\2\17"+
    "\2\46\4\17\1\u0111\23\17\3\46\2\0\2\46\4\0"+
    "\1\46\1\0\1\46\1\0\1\46\2\17\2\46\11\17"+
    "\1\u0112\16\17\3\46\2\0\2\46\4\0\1\46\1\0"+
    "\1\46\1\0\1\46\2\17\2\46\1\u0113\27\17\3\46"+
    "\2\0\2\46\4\0\1\46\1\0\1\46\1\0\1\46"+
    "\2\17\2\46\12\17\1\u0114\15\17\3\46\2\0\2\46"+
    "\4\0\1\46\1\0\1\46\1\0\1\46\2\17\2\46"+
    "\4\17\1\u0115\23\17\3\46\2\0\2\46\4\0\1\46"+
    "\1\0\1\46\1\0\1\46\2\17\2\46\4\17\1\u0116"+
    "\23\17\3\46\2\0\2\46\4\0\1\46\1\0\1\46"+
    "\1\0\1\46\2\17\2\46\11\17\1\u0117\16\17\3\46"+
    "\2\0\2\46\4\0\1\46\1\0\1\46\1\0\1\46"+
    "\2\17\2\46\21\17\1\u0118\6\17\3\46\2\0\2\46"+
    "\4\0\1\46\1\0\1\46\1\0\1\46\2\17\2\46"+
    "\16\17\1\u0119\11\17\3\46\2\0\2\46\4\0\1\46"+
    "\1\0\1\46\1\0\1\46\2\17\2\46\11\17\1\u011a"+
    "\16\17\3\46\2\0\2\46\4\0\1\46\1\0\1\46"+
    "\1\0\1\46\2\17\2\46\4\17\1\u011b\23\17\3\46"+
    "\2\0\2\46\4\0\1\46\1\0\1\46\1\0\1\46"+
    "\2\17\2\46\15\17\1\u011c\12\17\3\46\2\0\2\46"+
    "\4\0\1\46\1\0\1\46\1\0\1\46\2\17\2\46"+
    "\6\17\1\u011d\21\17\3\46\2\0\2\46\4\0\1\46"+
    "\1\0\1\46\1\0\1\46\2\17\2\46\13\17\1\u011e"+
    "\14\17\3\46\2\0\2\46\4\0\1\46\1\0\1\46"+
    "\1\0\1\46\2\17\2\46\14\17\1\u011f\13\17\3\46"+
    "\2\0\2\46\4\0\1\46\1\0\1\46\1\0\1\46"+
    "\2\17\2\46\1\17\1\u0120\26\17\3\46\2\0\2\46"+
    "\4\0\1\46\1\0\1\46\1\0\1\46\2\17\2\46"+
    "\13\17\1\u0121\14\17\3\46\2\0\2\46\4\0\1\46"+
    "\1\0\1\46\1\0\1\46\2\17\2\46\14\17\1\u0122"+
    "\13\17\3\46\2\0\2\46\4\0\1\46\1\0\1\46"+
    "\1\0\1\46\2\17\2\46\22\17\1\u0123\5\17\3\46"+
    "\2\0\2\46\4\0\1\46\1\0\1\46\1\0\1\46"+
    "\2\17\2\46\14\17\1\u0124\13\17\3\46\2\0\2\46"+
    "\4\0\1\46\1\0\1\46\1\0\1\46\2\17\2\46"+
    "\13\17\1\u0125\14\17\3\46\2\0\2\46\4\0\1\46"+
    "\1\0\1\46\1\0\1\46\2\17\2\46\1\u0126\27\17"+
    "\3\46\2\0\2\46\4\0\1\46\1\0\1\46\1\0"+
    "\1\46\2\17\2\46\1\u0127\27\17\3\46\2\0\2\46"+
    "\4\0\1\46\1\0\1\46\1\0\1\46\2\17\2\46"+
    "\10\17\1\u0128\17\17\3\46\2\0\2\46\4\0\1\46"+
    "\1\0\1\46\1\0\1\46\2\17\2\46\1\u0129\27\17"+
    "\3\46\2\0\2\46\4\0\1\46\1\0\1\46\1\0"+
    "\1\46\2\17\2\46\4\17\1\u012a\23\17\3\46\2\0"+
    "\2\46\4\0\1\46\1\0\1\46\1\0\1\46\2\17"+
    "\2\46\21\17\1\u012b\6\17\3\46\2\0\2\46\4\0"+
    "\1\46\1\0\1\46\1\0\1\46\2\17\2\46\16\17"+
    "\1\u012c\11\17\3\46\2\0\2\46\4\0\1\46\1\0"+
    "\1\46\1\0\1\46\2\17\2\46\11\17\1\u012d\16\17"+
    "\3\46\2\0\2\46\4\0\1\46\1\0\1\46\1\0"+
    "\1\46\2\17\2\46\14\17\1\u012e\13\17\3\46\2\0"+
    "\2\46\4\0\1\46\1\0\1\46\1\0\1\46\2\17"+
    "\2\46\14\17\1\u012f\13\17\3\46\2\0\2\46\4\0"+
    "\1\46\1\0\1\46\1\0\1\46\2\17\2\46\22\17"+
    "\1\u0130\5\17\3\46\2\0\2\46\4\0\1\46\1\0"+
    "\1\46\1\0\1\46\2\17\2\46\14\17\1\u0131\13\17"+
    "\3\46\2\0\2\46\4\0\1\46\1\0\1\46\1\0"+
    "\1\46\2\17\2\46\4\17\1\u0132\23\17\2\46";

  private static int [] zzUnpacktrans() {
    int [] result = new int[11132];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\0\2\1\1\11\2\1\1\11\3\1\2\11"+
    "\27\1\1\11\1\1\1\0\50\1\1\11\2\1\1\0"+
    "\50\1\1\0\1\1\2\0\47\1\1\0\213\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[306];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    //string para imprimir los contenidos de los tokens encontrados
    StringBuffer string = new StringBuffer();
    private int errorCount = 0;

    //symbol predefinidos por el ejemplo proporcionado por jflex
    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }

    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }

    //manejar errores y reportar
    private void handleError(String message) {
        System.err.println("ERROR: " + message + ", línea " + yyline + ", columna " + yycolumn);
        errorCount++;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { yycolumn += yylength();
    return symbol(sym.ERROR);
            }
          // fall through
          case 54: break;
          case 2:
            { yycolumn++;
        return symbol(sym.ERROR);
            }
          // fall through
          case 55: break;
          case 3:
            { 
            }
          // fall through
          case 56: break;
          case 4:
            { return symbol(sym.CHAR);
            }
          // fall through
          case 57: break;
          case 5:
            { return symbol(sym.COMILLADOBLE);
            }
          // fall through
          case 58: break;
          case 6:
            { return symbol(sym.COMILLA);
            }
          // fall through
          case 59: break;
          case 7:
            { return symbol(sym.COMMA);
            }
          // fall through
          case 60: break;
          case 8:
            { return symbol(sym.STRING);
            }
          // fall through
          case 61: break;
          case 9:
            { yycolumn++;
                                    return symbol(sym.ERROR);
            }
          // fall through
          case 62: break;
          case 10:
            { return symbol(sym.IDENTIFICADOR);
            }
          // fall through
          case 63: break;
          case 11:
            { return symbol(sym.IF);
            }
          // fall through
          case 64: break;
          case 12:
            { return symbol(sym.ELSE);
            }
          // fall through
          case 65: break;
          case 13:
            { return symbol(sym.IGUALDAD);
            }
          // fall through
          case 66: break;
          case 14:
            { return symbol(sym.TRUE);
            }
          // fall through
          case 67: break;
          case 15:
            { return symbol(sym.BREAK);
            }
          // fall through
          case 68: break;
          case 16:
            { return symbol(sym.RETURN);
            }
          // fall through
          case 69: break;
          case 17:
            { return symbol(sym.FALSE);
            }
          // fall through
          case 70: break;
          case 18:
            { return symbol(sym.MODULO);
            }
          // fall through
          case 71: break;
          case 19:
            { return symbol(sym.PRINT);
            }
          // fall through
          case 72: break;
          case 20:
            { return symbol(sym.INCREMENTO);
            }
          // fall through
          case 73: break;
          case 21:
            { return symbol(sym.DIVISION);
            }
          // fall through
          case 74: break;
          case 22:
            { return symbol(sym.DOSPUNTOS);
            }
          // fall through
          case 75: break;
          case 23:
            { return symbol(sym.FOR);
            }
          // fall through
          case 76: break;
          case 24:
            { return symbol(sym.DISYUNCION);
            }
          // fall through
          case 77: break;
          case 25:
            { return symbol(sym.DECREMENTO);
            }
          // fall through
          case 78: break;
          case 26:
            { return symbol(sym.BOOL);
            }
          // fall through
          case 79: break;
          case 27:
            { return symbol(sym.SWITCH);
            }
          // fall through
          case 80: break;
          case 28:
            { return symbol(sym.ASIGNACION);
            }
          // fall through
          case 81: break;
          case 29:
            { return symbol(sym.READ);
            }
          // fall through
          case 82: break;
          case 30:
            { return symbol(sym.CONJUNCION);
            }
          // fall through
          case 83: break;
          case 31:
            { return symbol(sym.MAYOR);
            }
          // fall through
          case 84: break;
          case 32:
            { return symbol(sym.SUMA);
            }
          // fall through
          case 85: break;
          case 33:
            { return symbol(sym.INTEGER);
            }
          // fall through
          case 86: break;
          case 34:
            { return symbol(sym.MAYORIGUAL);
            }
          // fall through
          case 87: break;
          case 35:
            { return symbol(sym.DEFAULT);
            }
          // fall through
          case 88: break;
          case 36:
            { return symbol(sym.MAIN);
            }
          // fall through
          case 89: break;
          case 37:
            { return symbol(sym.POTENCIA);
            }
          // fall through
          case 90: break;
          case 38:
            { return symbol(sym.NEGACION);
            }
          // fall through
          case 91: break;
          case 39:
            { return symbol(sym.FLOAT);
            }
          // fall through
          case 92: break;
          case 40:
            { return symbol(sym.WHILE);
            }
          // fall through
          case 93: break;
          case 41:
            { return symbol(sym.CASE);
            }
          // fall through
          case 94: break;
          case 42:
            { return symbol(sym.DIFERENTE);
            }
          // fall through
          case 95: break;
          case 43:
            { return symbol(sym.MENOR);
            }
          // fall through
          case 96: break;
          case 44:
            { return symbol(sym.MENORIGUAL);
            }
          // fall through
          case 97: break;
          case 45:
            { return symbol(sym.ENDEXPR);
            }
          // fall through
          case 98: break;
          case 46:
            { return symbol(sym.BRACEIZQ);
            }
          // fall through
          case 99: break;
          case 47:
            { return symbol(sym.PARENIZQ);
            }
          // fall through
          case 100: break;
          case 48:
            { return symbol(sym.MULTIPLICACION);
            }
          // fall through
          case 101: break;
          case 49:
            { return symbol(sym.CORCHETEIZQ);
            }
          // fall through
          case 102: break;
          case 50:
            { return symbol(sym.RESTA);
            }
          // fall through
          case 103: break;
          case 51:
            { return symbol(sym.BRACEDER);
            }
          // fall through
          case 104: break;
          case 52:
            { return symbol(sym.PARENDER);
            }
          // fall through
          case 105: break;
          case 53:
            { return symbol(sym.CORCHETEDER);
            }
          // fall through
          case 106: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
